#include "XTS.h"
#include "BlockCipher.h"
#include <cstdint>
#include "AES.h"
#include <iostream>
#define MAX_SECTOR_SIZE 64

#include "../simpleserial/simpleserial.h"

typedef unsigned char byte;

struct TestVector
{
    const char *name;
    byte key1[16];
    byte key2[16];
    byte plaintext[MAX_SECTOR_SIZE];
    byte ciphertext[MAX_SECTOR_SIZE];
    byte tweak[16];
    size_t sectorSize;
};

static const struct TestVector testVectorXTSAES128_1 = {
    .name        = "XTS-AES-128 #1",
    .key1        = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    .key2        = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    .plaintext   = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    .ciphertext  = {0x91, 0x7c, 0xf6, 0x9e, 0xbd, 0x68, 0xb2, 0xec,
                    0x9b, 0x9f, 0xe9, 0xa3, 0xea, 0xdd, 0xa6, 0x92,
                    0xcd, 0x43, 0xd2, 0xf5, 0x95, 0x98, 0xed, 0x85,
                    0x8c, 0x02, 0xc2, 0x65, 0x2f, 0xbf, 0x92, 0x2e},
    .tweak       = {0x00},
    .sectorSize  = 32
};
static const struct TestVector testVectorXTSAES128_2  = {
    .name        = "XTS-AES-128 #2",
    .key1        = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
    .key2        = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
                    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
    .plaintext   = {0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44},
    .ciphertext  = {0xc4, 0x54, 0x18, 0x5e, 0x6a, 0x16, 0x93, 0x6e,
                    0x39, 0x33, 0x40, 0x38, 0xac, 0xef, 0x83, 0x8b,
                    0xfb, 0x18, 0x6f, 0xff, 0x74, 0x80, 0xad, 0xc4,
                    0x28, 0x93, 0x82, 0xec, 0xd6, 0xd3, 0x94, 0xf0},
    .tweak       = {0x33, 0x33, 0x33, 0x33, 0x33},
    .sectorSize  = 32
};
static const struct TestVector testVectorXTSAES128_3  = {
    .name        = "XTS-AES-128 #3",
    .key1        = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
                    0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0},
    .key2        = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
                    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
    .plaintext   = {0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44},
    .ciphertext  = {0xaf, 0x85, 0x33, 0x6b, 0x59, 0x7a, 0xfc, 0x1a,
                    0x90, 0x0b, 0x2e, 0xb2, 0x1e, 0xc9, 0x49, 0xd2,
                    0x92, 0xdf, 0x4c, 0x04, 0x7e, 0x0b, 0x21, 0x53,
                    0x21, 0x86, 0xa5, 0x97, 0x1a, 0x22, 0x7a, 0x89},
    .tweak       = {0x33, 0x33, 0x33, 0x33, 0x33},
    .sectorSize  = 32
};
static const struct TestVector testVectorXTSAES128_4 = {
    // 512 byte test vector from the spec truncated to the first 64 bytes.
    .name        = "XTS-AES-128 #4",
    .key1        = {0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
                    0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26},
    .key2        = {0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
                    0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95},
    .plaintext   = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
                    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f},
    .ciphertext  = {0x27, 0xa7, 0x47, 0x9b, 0xef, 0xa1, 0xd4, 0x76,
                    0x48, 0x9f, 0x30, 0x8c, 0xd4, 0xcf, 0xa6, 0xe2,
                    0xa9, 0x6e, 0x4b, 0xbe, 0x32, 0x08, 0xff, 0x25,
                    0x28, 0x7d, 0xd3, 0x81, 0x96, 0x16, 0xe8, 0x9c,
                    0xc7, 0x8c, 0xf7, 0xf5, 0xe5, 0x43, 0x44, 0x5f,
                    0x83, 0x33, 0xd8, 0xfa, 0x7f, 0x56, 0x00, 0x00,
                    0x05, 0x27, 0x9f, 0xa5, 0xd8, 0xb5, 0xe4, 0xad,
                    0x40, 0xe7, 0x36, 0xdd, 0xb4, 0xd3, 0x54, 0x12},
    .tweak       = {0x00},
    .sectorSize  = 64
};
static const struct TestVector testVectorXTSAES128_15  = {
    .name        = "XTS-AES-128 #15",
    .key1        = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
                    0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0},
    .key2        = {0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8,
                    0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0},
    .plaintext   = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                    0x10},
    .ciphertext  = {0x6c, 0x16, 0x25, 0xdb, 0x46, 0x71, 0x52, 0x2d,
                    0x3d, 0x75, 0x99, 0x60, 0x1d, 0xe7, 0xca, 0x09,
                    0xed},
    .tweak       = {0x9a, 0x78, 0x56, 0x34, 0x12},
    .sectorSize  = 17
};
// This test vector is from:
// https://github.com/heisencoder/XTS-AES/blob/master/testvals/xts.4
// We use this one because the main specification doesn't have an odd
// block size greater than 32 bytes but less than 64 bytes.
static const struct TestVector testVectorXTSAES128_16  = {
    .name        = "XTS-AES-128 #16",
    .key1        = {0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
                    0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26},
    .key2        = {0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
                    0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95},
    .plaintext   = {0x50, 0x00, 0xec, 0xa5, 0xa1, 0xf6, 0xa4, 0x93,
                    0x78, 0x03, 0x0d, 0x9e, 0xe8, 0x05, 0xac, 0xef,
                    0x46, 0x0f, 0x31, 0x4e, 0xe0, 0x4b, 0xb5, 0x14,
                    0x03, 0x4e, 0xb2, 0x7f, 0xb8, 0xdf, 0x2b, 0xc8,
                    0x12, 0xae, 0x5b, 0xdf, 0x8c},
    .ciphertext  = {0xe5, 0x9e, 0x6f, 0x23, 0x3b, 0xe0, 0xe0, 0x83,
                    0x04, 0x83, 0xc6, 0xbd, 0x4e, 0x82, 0xf4, 0xc3,
                    0x95, 0x43, 0x55, 0x8a, 0x25, 0xe3, 0xdb, 0x60,
                    0xa5, 0x53, 0xa5, 0x94, 0x81, 0x45, 0xa6, 0xff,
                    0xb5, 0xe6, 0xbe, 0x1d, 0xb5},
    .tweak       = {0x33, 0x22, 0x11, 0x00},
    .sectorSize  = 37
};


XTS<AES128> *xtsaes128;
struct TestVector testVector;
byte buffer[MAX_SECTOR_SIZE];

bool testXTS(XTSCommon *cipher, const struct TestVector *test) {
    bool passed = true;

    memcpy(&testVector, test, sizeof(testVector));

    cipher->setSectorSize(testVector.sectorSize);
    cipher->setKey(testVector.key1, 32);
    cipher->setTweak(testVector.tweak, sizeof(testVector.tweak));

    // Encryption
    cipher->encryptSector(buffer, testVector.plaintext);
    if (memcmp(buffer, testVector.ciphertext, testVector.sectorSize)) {
        passed = false;
    }

    // Decryption
    cipher->decryptSector(buffer, testVector.ciphertext);
    if (memcmp(buffer, testVector.plaintext, testVector.sectorSize)) {
        passed = false;
    }

    // In-place Encryption
    memcpy(buffer, testVector.plaintext, testVector.sectorSize);
    cipher->encryptSector(buffer, buffer);
    if (memcmp(buffer, testVector.ciphertext, testVector.sectorSize)) {
        passed = false;
    }

    // In-place Decryption
    memcpy(buffer, testVector.ciphertext, testVector.sectorSize);
    cipher->decryptSector(buffer, buffer);
    if (memcmp(buffer, testVector.plaintext, testVector.sectorSize)) {
        passed = false;
    }

    return passed;
}



// Corrected function signature to match SimpleSerial requirements
uint8_t run_tests(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf) {

    //xtsaes128 = new XTS<AES128>();
    XTS<AES128> cipher;
    const struct TestVector* tests[] = {
        &testVectorXTSAES128_1,
        &testVectorXTSAES128_2,
        &testVectorXTSAES128_3,
        &testVectorXTSAES128_4,
        &testVectorXTSAES128_15,
        &testVectorXTSAES128_16
    };

    bool allTestsPassed = true;
    for (const auto& test : tests) {
        if (!testXTS(&cipher, test)) {
            allTestsPassed = false;
            break;
        }
    }

    uint8_t result = allTestsPassed ? 0x00 : 0x01;
    simpleserial_put('t', 1, &result); // Send test result back to host
    return result;
}


int main() {
    
    //NO MAKE FILE XD
    //g++ -o xts_test main.cpp AESCommon.cpp AES128.cpp XTS.cpp BlockCipher.cpp Crypto.cpp GF128.cpp -std=c++11
    //xtsaes128 = new XTS<AES128>();

    simpleserial_init();
    simpleserial_addcmd('t', 0, run_tests);


    return 0;
}