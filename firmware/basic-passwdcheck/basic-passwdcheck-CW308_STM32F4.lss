
basic-passwdcheck-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08000e70  08000e70  00010e70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f8c  08000f8c  00010f94  2**0
                  CONTENTS
  4 .ARM          00000000  08000f8c  08000f8c  00010f94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f8c  08000f94  00010f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000000  08000f94  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200000bc  08000f94  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00010f94  2**0
                  CONTENTS, READONLY
 12 .comment      00000012  00000000  00000000  00010fc0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f94  00000000  00000000  00010fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bdc  00000000  00000000  00014f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001c75  00000000  00000000  00015b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  000177b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000400  00000000  00000000  000179a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002344  00000000  00000000  00017da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001240  00000000  00000000  0001a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004fc  00000000  00000000  0001b32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0001b828  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000061  00000000  00000000  0001b96c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <deregister_tm_clones+0x1c>)
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <deregister_tm_clones+0x20>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d004      	beq.n	800019c <deregister_tm_clones+0x14>
 8000192:	4b06      	ldr	r3, [pc, #24]	; (80001ac <deregister_tm_clones+0x24>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <deregister_tm_clones+0x14>
 8000198:	f000 f84e 	bl	8000238 <frame_dummy+0x28>
 800019c:	bc10      	pop	{r4}
 800019e:	bc01      	pop	{r0}
 80001a0:	4700      	bx	r0
 80001a2:	46c0      	nop			; (mov r8, r8)
 80001a4:	20000000 	.word	0x20000000
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000

080001b0 <register_tm_clones>:
 80001b0:	4808      	ldr	r0, [pc, #32]	; (80001d4 <register_tm_clones+0x24>)
 80001b2:	4909      	ldr	r1, [pc, #36]	; (80001d8 <register_tm_clones+0x28>)
 80001b4:	1a09      	subs	r1, r1, r0
 80001b6:	108b      	asrs	r3, r1, #2
 80001b8:	0fc9      	lsrs	r1, r1, #31
 80001ba:	18c9      	adds	r1, r1, r3
 80001bc:	b510      	push	{r4, lr}
 80001be:	1049      	asrs	r1, r1, #1
 80001c0:	d004      	beq.n	80001cc <register_tm_clones+0x1c>
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <register_tm_clones+0x2c>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <register_tm_clones+0x1c>
 80001c8:	f000 f836 	bl	8000238 <frame_dummy+0x28>
 80001cc:	bc10      	pop	{r4}
 80001ce:	bc01      	pop	{r0}
 80001d0:	4700      	bx	r0
 80001d2:	46c0      	nop			; (mov r8, r8)
 80001d4:	20000000 	.word	0x20000000
 80001d8:	20000000 	.word	0x20000000
 80001dc:	00000000 	.word	0x00000000

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c08      	ldr	r4, [pc, #32]	; (8000204 <__do_global_dtors_aux+0x24>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d109      	bne.n	80001fe <__do_global_dtors_aux+0x1e>
 80001ea:	f7ff ffcd 	bl	8000188 <deregister_tm_clones>
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <__do_global_dtors_aux+0x28>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d002      	beq.n	80001fa <__do_global_dtors_aux+0x1a>
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <__do_global_dtors_aux+0x2c>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bc10      	pop	{r4}
 8000200:	bc01      	pop	{r0}
 8000202:	4700      	bx	r0
 8000204:	20000000 	.word	0x20000000
 8000208:	00000000 	.word	0x00000000
 800020c:	08000e58 	.word	0x08000e58

08000210 <frame_dummy>:
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <frame_dummy+0x1c>)
 8000212:	b510      	push	{r4, lr}
 8000214:	2b00      	cmp	r3, #0
 8000216:	d003      	beq.n	8000220 <frame_dummy+0x10>
 8000218:	4905      	ldr	r1, [pc, #20]	; (8000230 <frame_dummy+0x20>)
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <frame_dummy+0x24>)
 800021c:	f3af 8000 	nop.w
 8000220:	f7ff ffc6 	bl	80001b0 <register_tm_clones>
 8000224:	bc10      	pop	{r4}
 8000226:	bc01      	pop	{r0}
 8000228:	4700      	bx	r0
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000e58 	.word	0x08000e58
 8000238:	4718      	bx	r3
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__libc_init_array>:
#endif

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
 800023c:	b570      	push	{r4, r5, r6, lr}
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 800023e:	4d0e      	ldr	r5, [pc, #56]	; (8000278 <__libc_init_array+0x3c>)
 8000240:	4e0e      	ldr	r6, [pc, #56]	; (800027c <__libc_init_array+0x40>)
 8000242:	1b76      	subs	r6, r6, r5
 8000244:	10b6      	asrs	r6, r6, #2
  for (i = 0; i < count; i++)
 8000246:	d006      	beq.n	8000256 <__libc_init_array+0x1a>
 8000248:	2400      	movs	r4, #0
    __preinit_array_start[i] ();
 800024a:	cd08      	ldmia	r5!, {r3}
  for (i = 0; i < count; i++)
 800024c:	3401      	adds	r4, #1
    __preinit_array_start[i] ();
 800024e:	f000 f81b 	bl	8000288 <__libc_init_array+0x4c>
  for (i = 0; i < count; i++)
 8000252:	42a6      	cmp	r6, r4
 8000254:	d1f9      	bne.n	800024a <__libc_init_array+0xe>

#ifdef HAVE_INIT_FINI
  _init ();
 8000256:	f000 fdff 	bl	8000e58 <_init>
#endif

  count = __init_array_end - __init_array_start;
 800025a:	4d09      	ldr	r5, [pc, #36]	; (8000280 <__libc_init_array+0x44>)
 800025c:	4e09      	ldr	r6, [pc, #36]	; (8000284 <__libc_init_array+0x48>)
 800025e:	1b76      	subs	r6, r6, r5
 8000260:	10b6      	asrs	r6, r6, #2
  for (i = 0; i < count; i++)
 8000262:	d006      	beq.n	8000272 <__libc_init_array+0x36>
 8000264:	2400      	movs	r4, #0
    __init_array_start[i] ();
 8000266:	cd08      	ldmia	r5!, {r3}
  for (i = 0; i < count; i++)
 8000268:	3401      	adds	r4, #1
    __init_array_start[i] ();
 800026a:	f000 f80d 	bl	8000288 <__libc_init_array+0x4c>
  for (i = 0; i < count; i++)
 800026e:	42a6      	cmp	r6, r4
 8000270:	d1f9      	bne.n	8000266 <__libc_init_array+0x2a>
}
 8000272:	bc70      	pop	{r4, r5, r6}
 8000274:	bc01      	pop	{r0}
 8000276:	4700      	bx	r0
 8000278:	08000f8c 	.word	0x08000f8c
 800027c:	08000f8c 	.word	0x08000f8c
 8000280:	08000f8c 	.word	0x08000f8c
 8000284:	08000f90 	.word	0x08000f90
 8000288:	4718      	bx	r3
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <delay_2_ms>:

  } while (*++c);
}

static void delay_2_ms()
{
 800028c:	b082      	sub	sp, #8
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 800028e:	2300      	movs	r3, #0
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	4293      	cmp	r3, r2
 800029a:	d901      	bls.n	80002a0 <delay_2_ms+0x14>
    ;
  }
}
 800029c:	b002      	add	sp, #8
 800029e:	4770      	bx	lr
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	e7f6      	b.n	8000296 <delay_2_ms+0xa>

080002a8 <led_ok>:
    
#endif

__attribute__((weak)) void led_ok(unsigned int status)
{
}
 80002a8:	4770      	bx	lr

080002aa <led_error>:
 80002aa:	4770      	bx	lr

080002ac <my_puts>:
{
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4604      	mov	r4, r0
    putch(*c);
 80002b0:	7820      	ldrb	r0, [r4, #0]
 80002b2:	f000 f951 	bl	8000558 <putch>
  } while (*++c);
 80002b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f8      	bne.n	80002b0 <my_puts+0x4>
}
 80002be:	bd10      	pop	{r4, pc}

080002c0 <my_read>:

void my_read(char *buf, int len)
{
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	4604      	mov	r4, r0
 80002c4:	460e      	mov	r6, r1
  for(int i = 0; i < len; i++) {
 80002c6:	2500      	movs	r5, #0
 80002c8:	42b5      	cmp	r5, r6
 80002ca:	da0c      	bge.n	80002e6 <my_read+0x26>
 80002cc:	1967      	adds	r7, r4, r5
    while (buf[i] = getch(), buf[i] == '\0');
 80002ce:	f000 f931 	bl	8000534 <getch>
 80002d2:	5560      	strb	r0, [r4, r5]
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d0fa      	beq.n	80002ce <my_read+0xe>

    if (buf[i] == '\n') {
 80002d8:	280a      	cmp	r0, #10
 80002da:	d102      	bne.n	80002e2 <my_read+0x22>
      buf[i] = '\0';
 80002dc:	2300      	movs	r3, #0
 80002de:	703b      	strb	r3, [r7, #0]
      return;
    }
  }
  buf[len - 1] = '\0';
}
 80002e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for(int i = 0; i < len; i++) {
 80002e2:	3501      	adds	r5, #1
 80002e4:	e7f0      	b.n	80002c8 <my_read+0x8>
  buf[len - 1] = '\0';
 80002e6:	4434      	add	r4, r6
 80002e8:	2300      	movs	r3, #0
 80002ea:	f804 3c01 	strb.w	r3, [r4, #-1]
 80002ee:	e7f7      	b.n	80002e0 <my_read+0x20>

080002f0 <main>:

int main(void)
  {
 80002f0:	b510      	push	{r4, lr}
 80002f2:	b08c      	sub	sp, #48	; 0x30
    platform_init();
 80002f4:	f000 f870 	bl	80003d8 <platform_init>
  init_uart();
 80002f8:	f000 f8ae 	bl	8000458 <init_uart>
  trigger_setup();
 80002fc:	f000 f8ea 	bl	80004d4 <trigger_setup>

    char passwd[32];
    char correct_passwd[] = "h0px3";
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <main+0xbc>)
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	9002      	str	r0, [sp, #8]
 8000306:	889b      	ldrh	r3, [r3, #4]

  while(1){

        my_puts("*****Safe-o-matic 3000 Booting...\n");
 8000308:	4829      	ldr	r0, [pc, #164]	; (80003b0 <main+0xc0>)
    char correct_passwd[] = "h0px3";
 800030a:	f8ad 300c 	strh.w	r3, [sp, #12]
        my_puts("*****Safe-o-matic 3000 Booting...\n");
 800030e:	f7ff ffcd 	bl	80002ac <my_puts>
        //Print some fancy-sounding stuff so that attackers
        //will get scared and leave us alone
        my_puts("Aligning bits........[DONE]\n");
 8000312:	4828      	ldr	r0, [pc, #160]	; (80003b4 <main+0xc4>)
 8000314:	f7ff ffca 	bl	80002ac <my_puts>
        delay_2_ms();
        my_puts("Checking Cesium RNG..[DONE]\n");
 8000318:	4827      	ldr	r0, [pc, #156]	; (80003b8 <main+0xc8>)
        delay_2_ms();
 800031a:	f7ff ffb7 	bl	800028c <delay_2_ms>
        my_puts("Checking Cesium RNG..[DONE]\n");
 800031e:	f7ff ffc5 	bl	80002ac <my_puts>
        delay_2_ms();
        my_puts("Masquerading flash...[DONE]\n");
 8000322:	4826      	ldr	r0, [pc, #152]	; (80003bc <main+0xcc>)
        delay_2_ms();
 8000324:	f7ff ffb2 	bl	800028c <delay_2_ms>
        my_puts("Masquerading flash...[DONE]\n");
 8000328:	f7ff ffc0 	bl	80002ac <my_puts>
        delay_2_ms();
        my_puts("Decrypting database..[DONE]\n");
 800032c:	4824      	ldr	r0, [pc, #144]	; (80003c0 <main+0xd0>)
        delay_2_ms();
 800032e:	f7ff ffad 	bl	800028c <delay_2_ms>
        my_puts("Decrypting database..[DONE]\n");
 8000332:	f7ff ffbb 	bl	80002ac <my_puts>
        delay_2_ms();
        my_puts("\n\n");
 8000336:	4823      	ldr	r0, [pc, #140]	; (80003c4 <main+0xd4>)
        delay_2_ms();
 8000338:	f7ff ffa8 	bl	800028c <delay_2_ms>
        my_puts("\n\n");
 800033c:	f7ff ffb6 	bl	80002ac <my_puts>

        //Give them one last warning
        my_puts("WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\n");
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <main+0xd8>)
 8000342:	f7ff ffb3 	bl	80002ac <my_puts>

        trigger_low();
 8000346:	f000 f8ed 	bl	8000524 <trigger_low>

        //Get password
        my_puts("Please enter password to continue: ");
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <main+0xdc>)
 800034c:	f7ff ffae 	bl	80002ac <my_puts>
        my_read(passwd, 32);
 8000350:	2120      	movs	r1, #32
 8000352:	a804      	add	r0, sp, #16
 8000354:	f7ff ffb4 	bl	80002c0 <my_read>

        uint8_t passbad = 0;

        trigger_high();
 8000358:	f000 f8dc 	bl	8000514 <trigger_high>

        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 800035c:	a902      	add	r1, sp, #8
 800035e:	aa04      	add	r2, sp, #16
        trigger_high();
 8000360:	2306      	movs	r3, #6
            if (correct_passwd[i] != passwd[i]){
 8000362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000366:	f812 0b01 	ldrb.w	r0, [r2], #1
 800036a:	4284      	cmp	r4, r0
 800036c:	d11b      	bne.n	80003a6 <main+0xb6>
        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 800036e:	3b01      	subs	r3, #1
 8000370:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000374:	d1f5      	bne.n	8000362 <main+0x72>
            delay_2_ms();
            delay_2_ms();
            my_puts("PASSWORD FAIL\n");
            led_error(1);
        } else {
            my_puts("Access granted, Welcome!\n");
 8000376:	4816      	ldr	r0, [pc, #88]	; (80003d0 <main+0xe0>)
 8000378:	f7ff ff98 	bl	80002ac <my_puts>
            led_ok(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f7ff ff93 	bl	80002a8 <led_ok>
 8000382:	e00f      	b.n	80003a4 <main+0xb4>
            for(volatile int i = 0; i < wait; i++){
 8000384:	9b01      	ldr	r3, [sp, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	9b01      	ldr	r3, [sp, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	ddf9      	ble.n	8000384 <main+0x94>
            my_puts("PASSWORD FAIL\n");
 8000390:	4810      	ldr	r0, [pc, #64]	; (80003d4 <main+0xe4>)
            delay_2_ms();
 8000392:	f7ff ff7b 	bl	800028c <delay_2_ms>
            delay_2_ms();
 8000396:	f7ff ff79 	bl	800028c <delay_2_ms>
            my_puts("PASSWORD FAIL\n");
 800039a:	f7ff ff87 	bl	80002ac <my_puts>
            led_error(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff ff83 	bl	80002aa <led_error>
        }

        //All done;
        while(1);
 80003a4:	e7fe      	b.n	80003a4 <main+0xb4>
            for(volatile int i = 0; i < wait; i++){
 80003a6:	2300      	movs	r3, #0
 80003a8:	e7ee      	b.n	8000388 <main+0x98>
 80003aa:	bf00      	nop
 80003ac:	08000f86 	.word	0x08000f86
 80003b0:	08000e70 	.word	0x08000e70
 80003b4:	08000e93 	.word	0x08000e93
 80003b8:	08000eb0 	.word	0x08000eb0
 80003bc:	08000ecd 	.word	0x08000ecd
 80003c0:	08000eea 	.word	0x08000eea
 80003c4:	08000f07 	.word	0x08000f07
 80003c8:	08000f0a 	.word	0x08000f0a
 80003cc:	08000f39 	.word	0x08000f39
 80003d0:	08000f6c 	.word	0x08000f6c
 80003d4:	08000f5d 	.word	0x08000f5d

080003d8 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 80003d8:	b530      	push	{r4, r5, lr}
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003da:	2203      	movs	r2, #3
{
 80003dc:	b093      	sub	sp, #76	; 0x4c
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80003e6:	2102      	movs	r1, #2
 80003e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003ec:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 80003f0:	200c      	movs	r0, #12
 80003f2:	23c4      	movs	r3, #196	; 0xc4
 80003f4:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80003f8:	2404      	movs	r4, #4
 80003fa:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 80003fc:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003fe:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8000400:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8000404:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000406:	f000 f8bf 	bl	8000588 <HAL_RCC_OscConfig>
 800040a:	4604      	mov	r4, r0
 800040c:	b100      	cbz	r0, 8000410 <platform_init+0x38>
        for(;;);
 800040e:	e7fe      	b.n	800040e <platform_init+0x36>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8000410:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000412:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000416:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 800041a:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800041c:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8000420:	f000 fa52 	bl	80008c8 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <platform_init+0x74>)
 8000426:	9400      	str	r4, [sp, #0]
 8000428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 800042a:	4809      	ldr	r0, [pc, #36]	; (8000450 <platform_init+0x78>)
	__HAL_RCC_RNG_CLK_ENABLE();
 800042c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000430:	635a      	str	r2, [r3, #52]	; 0x34
 8000432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <platform_init+0x7c>)
 800043e:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 8000440:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 8000442:	f000 fcc5 	bl	8000dd0 <HAL_RNG_Init>

}
 8000446:	b013      	add	sp, #76	; 0x4c
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop
 800044c:	40023800 	.word	0x40023800
 8000450:	2000001c 	.word	0x2000001c
 8000454:	50060800 	.word	0x50060800

08000458 <init_uart>:

void init_uart(void)
{
 8000458:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800045a:	2302      	movs	r3, #2
{
 800045c:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800045e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000462:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8000466:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000468:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 800046c:	4c15      	ldr	r4, [pc, #84]	; (80004c4 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800046e:	4816      	ldr	r0, [pc, #88]	; (80004c8 <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 8000470:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000472:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8000474:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000476:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8000478:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800047a:	4313      	orrs	r3, r2
 800047c:	6323      	str	r3, [r4, #48]	; 0x30
 800047e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000480:	4013      	ands	r3, r2
 8000482:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000484:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8000486:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000488:	f000 fab6 	bl	80009f8 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 800048c:	480f      	ldr	r0, [pc, #60]	; (80004cc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8000490:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 8000492:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8000496:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800049a:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800049e:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80004a0:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80004a2:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80004a4:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 80004a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	6463      	str	r3, [r4, #68]	; 0x44
 80004ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 80004b6:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 80004b8:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 80004ba:	f000 fb89 	bl	8000bd0 <HAL_UART_Init>
}
 80004be:	b009      	add	sp, #36	; 0x24
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020000 	.word	0x40020000
 80004cc:	2000001c 	.word	0x2000001c
 80004d0:	40011000 	.word	0x40011000

080004d4 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80004d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 80004da:	2100      	movs	r1, #0
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e0:	f042 0201 	orr.w	r2, r2, #1
 80004e4:	631a      	str	r2, [r3, #48]	; 0x30
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 80004e8:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004f6:	2301      	movs	r3, #1
 80004f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004fc:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2302      	movs	r3, #2
 8000500:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000502:	f000 fa79 	bl	80009f8 <HAL_GPIO_Init>
#endif
}
 8000506:	b007      	add	sp, #28
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4
 800050c:	40023800 	.word	0x40023800
 8000510:	40020000 	.word	0x40020000

08000514 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <trigger_high+0xc>)
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	f000 bb52 	b.w	8000bc4 <HAL_GPIO_WritePin>
 8000520:	40020000 	.word	0x40020000

08000524 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <trigger_low+0xc>)
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	f000 bb4a 	b.w	8000bc4 <HAL_GPIO_WritePin>
 8000530:	40020000 	.word	0x40020000

08000534 <getch>:
#endif
}
char getch(void)
{
 8000534:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8000536:	4c07      	ldr	r4, [pc, #28]	; (8000554 <getch+0x20>)
 8000538:	f241 3388 	movw	r3, #5000	; 0x1388
 800053c:	2201      	movs	r2, #1
 800053e:	f10d 0107 	add.w	r1, sp, #7
 8000542:	4620      	mov	r0, r4
 8000544:	f000 fbf7 	bl	8000d36 <HAL_UART_Receive>
 8000548:	2800      	cmp	r0, #0
 800054a:	d1f5      	bne.n	8000538 <getch+0x4>
	return d;
}
 800054c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000550:	b002      	add	sp, #8
 8000552:	bd10      	pop	{r4, pc}
 8000554:	20000028 	.word	0x20000028

08000558 <putch>:

void putch(char c)
{
 8000558:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800055a:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 800055e:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000562:	2201      	movs	r2, #1
 8000564:	f10d 0107 	add.w	r1, sp, #7
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <putch+0x1c>)
 800056a:	f000 fb9f 	bl	8000cac <HAL_UART_Transmit>
}
 800056e:	b003      	add	sp, #12
 8000570:	f85d fb04 	ldr.w	pc, [sp], #4
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <HAL_GetTick+0xc>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	1c42      	adds	r2, r0, #1
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200000b8 	.word	0x200000b8

08000588 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000588:	6803      	ldr	r3, [r0, #0]
{
 800058a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800058c:	07de      	lsls	r6, r3, #31
{
 800058e:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000590:	d43b      	bmi.n	800060a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000592:	680b      	ldr	r3, [r1, #0]
 8000594:	079d      	lsls	r5, r3, #30
 8000596:	f100 808b 	bmi.w	80006b0 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800059a:	680b      	ldr	r3, [r1, #0]
 800059c:	0718      	lsls	r0, r3, #28
 800059e:	f100 80d6 	bmi.w	800074e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005a2:	680b      	ldr	r3, [r1, #0]
 80005a4:	075a      	lsls	r2, r3, #29
 80005a6:	d52a      	bpl.n	80005fe <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80005ae:	4c92      	ldr	r4, [pc, #584]	; (80007f8 <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005b6:	641a      	str	r2, [r3, #64]	; 0x40
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c8:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80005ca:	f7ff ffd5 	bl	8000578 <HAL_GetTick>
 80005ce:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	05d8      	lsls	r0, r3, #23
 80005d4:	f140 80df 	bpl.w	8000796 <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005d8:	688b      	ldr	r3, [r1, #8]
 80005da:	4c86      	ldr	r4, [pc, #536]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80005dc:	2b01      	cmp	r3, #1
 80005de:	f040 80e1 	bne.w	80007a4 <HAL_RCC_OscConfig+0x21c>
 80005e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005ea:	f7ff ffc5 	bl	8000578 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005ee:	4d81      	ldr	r5, [pc, #516]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80005f0:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005f2:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80005f8:	079a      	lsls	r2, r3, #30
 80005fa:	f140 80f4 	bpl.w	80007e6 <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005fe:	698a      	ldr	r2, [r1, #24]
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 80ff 	bne.w	8000804 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000606:	2000      	movs	r0, #0
 8000608:	e015      	b.n	8000636 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800060a:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	f002 020c 	and.w	r2, r2, #12
 8000612:	2a04      	cmp	r2, #4
 8000614:	d007      	beq.n	8000626 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800061c:	2a08      	cmp	r2, #8
 800061e:	d10c      	bne.n	800063a <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	0254      	lsls	r4, r2, #9
 8000624:	d509      	bpl.n	800063a <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000626:	4b73      	ldr	r3, [pc, #460]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0398      	lsls	r0, r3, #14
 800062c:	d5b1      	bpl.n	8000592 <HAL_RCC_OscConfig+0xa>
 800062e:	684b      	ldr	r3, [r1, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1ae      	bne.n	8000592 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000634:	2001      	movs	r0, #1
}
 8000636:	b002      	add	sp, #8
 8000638:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063a:	684a      	ldr	r2, [r1, #4]
 800063c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000640:	d112      	bne.n	8000668 <HAL_RCC_OscConfig+0xe0>
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800064a:	f7ff ff95 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800064e:	4d69      	ldr	r5, [pc, #420]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000650:	4e6a      	ldr	r6, [pc, #424]	; (80007fc <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8000652:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000654:	682b      	ldr	r3, [r5, #0]
 8000656:	039a      	lsls	r2, r3, #14
 8000658:	d49b      	bmi.n	8000592 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065a:	f7ff ff8d 	bl	8000578 <HAL_GetTick>
 800065e:	1b00      	subs	r0, r0, r4
 8000660:	42b0      	cmp	r0, r6
 8000662:	d9f7      	bls.n	8000654 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000664:	2003      	movs	r0, #3
 8000666:	e7e6      	b.n	8000636 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000668:	4c62      	ldr	r4, [pc, #392]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 800066a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	d107      	bne.n	8000682 <HAL_RCC_OscConfig+0xfa>
 8000672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000676:	6023      	str	r3, [r4, #0]
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000680:	e7e3      	b.n	800064a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000686:	6023      	str	r3, [r4, #0]
 8000688:	6823      	ldr	r3, [r4, #0]
 800068a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000690:	2a00      	cmp	r2, #0
 8000692:	d1da      	bne.n	800064a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000694:	f7ff ff70 	bl	8000578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000698:	4e58      	ldr	r6, [pc, #352]	; (80007fc <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800069a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	039b      	lsls	r3, r3, #14
 80006a0:	f57f af77 	bpl.w	8000592 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006a4:	f7ff ff68 	bl	8000578 <HAL_GetTick>
 80006a8:	1b40      	subs	r0, r0, r5
 80006aa:	42b0      	cmp	r0, r6
 80006ac:	d9f6      	bls.n	800069c <HAL_RCC_OscConfig+0x114>
 80006ae:	e7d9      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006b0:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	f012 0f0c 	tst.w	r2, #12
 80006b8:	d007      	beq.n	80006ca <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006c0:	2a08      	cmp	r2, #8
 80006c2:	d116      	bne.n	80006f2 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	0258      	lsls	r0, r3, #9
 80006c8:	d413      	bmi.n	80006f2 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ca:	484a      	ldr	r0, [pc, #296]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	079a      	lsls	r2, r3, #30
 80006d0:	d502      	bpl.n	80006d8 <HAL_RCC_OscConfig+0x150>
 80006d2:	68cb      	ldr	r3, [r1, #12]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d1ad      	bne.n	8000634 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006d8:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006da:	23f8      	movs	r3, #248	; 0xf8
 80006dc:	fa93 f3a3 	rbit	r3, r3
 80006e0:	fab3 f283 	clz	r2, r3
 80006e4:	690b      	ldr	r3, [r1, #16]
 80006e6:	4093      	lsls	r3, r2
 80006e8:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006f0:	e753      	b.n	800059a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80006f2:	68ca      	ldr	r2, [r1, #12]
 80006f4:	4b42      	ldr	r3, [pc, #264]	; (8000800 <HAL_RCC_OscConfig+0x278>)
 80006f6:	b1da      	cbz	r2, 8000730 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006fc:	f7ff ff3c 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000700:	4c3c      	ldr	r4, [pc, #240]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8000702:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	079b      	lsls	r3, r3, #30
 8000708:	d50c      	bpl.n	8000724 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800070a:	6820      	ldr	r0, [r4, #0]
 800070c:	23f8      	movs	r3, #248	; 0xf8
 800070e:	fa93 f3a3 	rbit	r3, r3
 8000712:	fab3 f283 	clz	r2, r3
 8000716:	690b      	ldr	r3, [r1, #16]
 8000718:	4093      	lsls	r3, r2
 800071a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800071e:	4313      	orrs	r3, r2
 8000720:	6023      	str	r3, [r4, #0]
 8000722:	e73a      	b.n	800059a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000724:	f7ff ff28 	bl	8000578 <HAL_GetTick>
 8000728:	1b40      	subs	r0, r0, r5
 800072a:	2802      	cmp	r0, #2
 800072c:	d9ea      	bls.n	8000704 <HAL_RCC_OscConfig+0x17c>
 800072e:	e799      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8000730:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000732:	f7ff ff21 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000736:	4d2f      	ldr	r5, [pc, #188]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8000738:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	079e      	lsls	r6, r3, #30
 800073e:	f57f af2c 	bpl.w	800059a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000742:	f7ff ff19 	bl	8000578 <HAL_GetTick>
 8000746:	1b00      	subs	r0, r0, r4
 8000748:	2802      	cmp	r0, #2
 800074a:	d9f6      	bls.n	800073a <HAL_RCC_OscConfig+0x1b2>
 800074c:	e78a      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800074e:	694a      	ldr	r2, [r1, #20]
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <HAL_RCC_OscConfig+0x278>)
 8000752:	b182      	cbz	r2, 8000776 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8000754:	2201      	movs	r2, #1
 8000756:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800075a:	f7ff ff0d 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800075e:	4d25      	ldr	r5, [pc, #148]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8000760:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000762:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000764:	079b      	lsls	r3, r3, #30
 8000766:	f53f af1c 	bmi.w	80005a2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800076a:	f7ff ff05 	bl	8000578 <HAL_GetTick>
 800076e:	1b00      	subs	r0, r0, r4
 8000770:	2802      	cmp	r0, #2
 8000772:	d9f6      	bls.n	8000762 <HAL_RCC_OscConfig+0x1da>
 8000774:	e776      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8000776:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800077a:	f7ff fefd 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800077e:	4d1d      	ldr	r5, [pc, #116]	; (80007f4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8000780:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000782:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000784:	079e      	lsls	r6, r3, #30
 8000786:	f57f af0c 	bpl.w	80005a2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078a:	f7ff fef5 	bl	8000578 <HAL_GetTick>
 800078e:	1b00      	subs	r0, r0, r4
 8000790:	2802      	cmp	r0, #2
 8000792:	d9f6      	bls.n	8000782 <HAL_RCC_OscConfig+0x1fa>
 8000794:	e766      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000796:	f7ff feef 	bl	8000578 <HAL_GetTick>
 800079a:	1b40      	subs	r0, r0, r5
 800079c:	2802      	cmp	r0, #2
 800079e:	f67f af17 	bls.w	80005d0 <HAL_RCC_OscConfig+0x48>
 80007a2:	e75f      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	d104      	bne.n	80007b2 <HAL_RCC_OscConfig+0x22a>
 80007a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6723      	str	r3, [r4, #112]	; 0x70
 80007b0:	e717      	b.n	80005e2 <HAL_RCC_OscConfig+0x5a>
 80007b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80007b4:	f022 0201 	bic.w	r2, r2, #1
 80007b8:	6722      	str	r2, [r4, #112]	; 0x70
 80007ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80007bc:	f022 0204 	bic.w	r2, r2, #4
 80007c0:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f47f af11 	bne.w	80005ea <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 80007c8:	f7ff fed6 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007cc:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80007d4:	079b      	lsls	r3, r3, #30
 80007d6:	f57f af12 	bpl.w	80005fe <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007da:	f7ff fecd 	bl	8000578 <HAL_GetTick>
 80007de:	1b40      	subs	r0, r0, r5
 80007e0:	42b0      	cmp	r0, r6
 80007e2:	d9f6      	bls.n	80007d2 <HAL_RCC_OscConfig+0x24a>
 80007e4:	e73e      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007e6:	f7ff fec7 	bl	8000578 <HAL_GetTick>
 80007ea:	1b00      	subs	r0, r0, r4
 80007ec:	42b0      	cmp	r0, r6
 80007ee:	f67f af02 	bls.w	80005f6 <HAL_RCC_OscConfig+0x6e>
 80007f2:	e737      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000
 80007fc:	05f5e100 	.word	0x05f5e100
 8000800:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000804:	4c2d      	ldr	r4, [pc, #180]	; (80008bc <HAL_RCC_OscConfig+0x334>)
 8000806:	68a3      	ldr	r3, [r4, #8]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b08      	cmp	r3, #8
 800080e:	f43f af11 	beq.w	8000634 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <HAL_RCC_OscConfig+0x338>)
 8000814:	2a02      	cmp	r2, #2
 8000816:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800081a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800081c:	d140      	bne.n	80008a0 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 800081e:	f7ff feab 	bl	8000578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000822:	4e28      	ldr	r6, [pc, #160]	; (80008c4 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8000824:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	0198      	lsls	r0, r3, #6
 800082a:	d433      	bmi.n	8000894 <HAL_RCC_OscConfig+0x30c>
 800082c:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8000830:	fa96 f6a6 	rbit	r6, r6
 8000834:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000838:	fab6 f686 	clz	r6, r6
 800083c:	fa92 f2a2 	rbit	r2, r2
 8000840:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8000844:	fab2 f582 	clz	r5, r2
 8000848:	fa90 f0a0 	rbit	r0, r0
 800084c:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8000850:	4313      	orrs	r3, r2
 8000852:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000854:	40b2      	lsls	r2, r6
 8000856:	4313      	orrs	r3, r2
 8000858:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800085a:	0852      	lsrs	r2, r2, #1
 800085c:	3a01      	subs	r2, #1
 800085e:	40aa      	lsls	r2, r5
 8000860:	4313      	orrs	r3, r2
 8000862:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000864:	4d17      	ldr	r5, [pc, #92]	; (80008c4 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000866:	fab0 f080 	clz	r0, r0
 800086a:	fa02 f000 	lsl.w	r0, r2, r0
 800086e:	4303      	orrs	r3, r0
 8000870:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000874:	4c11      	ldr	r4, [pc, #68]	; (80008bc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 8000876:	2201      	movs	r2, #1
 8000878:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800087a:	f7ff fe7d 	bl	8000578 <HAL_GetTick>
 800087e:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	019a      	lsls	r2, r3, #6
 8000884:	f53f aebf 	bmi.w	8000606 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000888:	f7ff fe76 	bl	8000578 <HAL_GetTick>
 800088c:	1a40      	subs	r0, r0, r1
 800088e:	42a8      	cmp	r0, r5
 8000890:	d9f6      	bls.n	8000880 <HAL_RCC_OscConfig+0x2f8>
 8000892:	e6e7      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000894:	f7ff fe70 	bl	8000578 <HAL_GetTick>
 8000898:	1b40      	subs	r0, r0, r5
 800089a:	42b0      	cmp	r0, r6
 800089c:	d9c3      	bls.n	8000826 <HAL_RCC_OscConfig+0x29e>
 800089e:	e6e1      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80008a0:	f7ff fe6a 	bl	8000578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a4:	4d07      	ldr	r5, [pc, #28]	; (80008c4 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 80008a6:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	019b      	lsls	r3, r3, #6
 80008ac:	f57f aeab 	bpl.w	8000606 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008b0:	f7ff fe62 	bl	8000578 <HAL_GetTick>
 80008b4:	1a40      	subs	r0, r0, r1
 80008b6:	42a8      	cmp	r0, r5
 80008b8:	d9f6      	bls.n	80008a8 <HAL_RCC_OscConfig+0x320>
 80008ba:	e6d3      	b.n	8000664 <HAL_RCC_OscConfig+0xdc>
 80008bc:	40023800 	.word	0x40023800
 80008c0:	42470000 	.word	0x42470000
 80008c4:	001e8480 	.word	0x001e8480

080008c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <HAL_RCC_ClockConfig+0x128>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f002 020f 	and.w	r2, r2, #15
 80008d2:	428a      	cmp	r2, r1
{
 80008d4:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d6:	d31a      	bcc.n	800090e <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	0790      	lsls	r0, r2, #30
 80008dc:	d420      	bmi.n	8000920 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008de:	07d2      	lsls	r2, r2, #31
 80008e0:	d426      	bmi.n	8000930 <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <HAL_RCC_ClockConfig+0x128>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	f002 020f 	and.w	r2, r2, #15
 80008ea:	428a      	cmp	r2, r1
 80008ec:	d870      	bhi.n	80009d0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ee:	6820      	ldr	r0, [r4, #0]
 80008f0:	0743      	lsls	r3, r0, #29
 80008f2:	d475      	bmi.n	80009e0 <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008f4:	f010 0008 	ands.w	r0, r0, #8
 80008f8:	d011      	beq.n	800091e <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008fa:	4a3e      	ldr	r2, [pc, #248]	; (80009f4 <HAL_RCC_ClockConfig+0x12c>)
 80008fc:	6921      	ldr	r1, [r4, #16]
 80008fe:	6893      	ldr	r3, [r2, #8]
 8000900:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000904:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000908:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	e007      	b.n	800091e <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	428b      	cmp	r3, r1
 800091a:	d0dd      	beq.n	80008d8 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
}
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000920:	4834      	ldr	r0, [pc, #208]	; (80009f4 <HAL_RCC_ClockConfig+0x12c>)
 8000922:	68a5      	ldr	r5, [r4, #8]
 8000924:	6883      	ldr	r3, [r0, #8]
 8000926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800092a:	432b      	orrs	r3, r5
 800092c:	6083      	str	r3, [r0, #8]
 800092e:	e7d6      	b.n	80008de <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000930:	6862      	ldr	r2, [r4, #4]
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <HAL_RCC_ClockConfig+0x12c>)
 8000934:	2a01      	cmp	r2, #1
 8000936:	d11d      	bne.n	8000974 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093e:	d0ed      	beq.n	800091c <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000940:	4d2c      	ldr	r5, [pc, #176]	; (80009f4 <HAL_RCC_ClockConfig+0x12c>)
 8000942:	68ab      	ldr	r3, [r5, #8]
 8000944:	f023 0303 	bic.w	r3, r3, #3
 8000948:	4313      	orrs	r3, r2
 800094a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800094c:	f7ff fe14 	bl	8000578 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000954:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000956:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095a:	d115      	bne.n	8000988 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800095c:	68ab      	ldr	r3, [r5, #8]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	2b04      	cmp	r3, #4
 8000964:	d0bd      	beq.n	80008e2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000966:	f7ff fe07 	bl	8000578 <HAL_GetTick>
 800096a:	1b80      	subs	r0, r0, r6
 800096c:	42b8      	cmp	r0, r7
 800096e:	d9f5      	bls.n	800095c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000970:	2003      	movs	r0, #3
 8000972:	e7d4      	b.n	800091e <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000974:	1e90      	subs	r0, r2, #2
 8000976:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000978:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800097a:	d802      	bhi.n	8000982 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800097c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000980:	e7dd      	b.n	800093e <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000982:	f013 0f02 	tst.w	r3, #2
 8000986:	e7da      	b.n	800093e <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000988:	2b02      	cmp	r3, #2
 800098a:	d10a      	bne.n	80009a2 <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800098c:	68ab      	ldr	r3, [r5, #8]
 800098e:	f003 030c 	and.w	r3, r3, #12
 8000992:	2b08      	cmp	r3, #8
 8000994:	d0a5      	beq.n	80008e2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000996:	f7ff fdef 	bl	8000578 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	42b8      	cmp	r0, r7
 800099e:	d9f5      	bls.n	800098c <HAL_RCC_ClockConfig+0xc4>
 80009a0:	e7e6      	b.n	8000970 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d10f      	bne.n	80009c6 <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009a6:	68ab      	ldr	r3, [r5, #8]
 80009a8:	f003 030c 	and.w	r3, r3, #12
 80009ac:	2b0c      	cmp	r3, #12
 80009ae:	d098      	beq.n	80008e2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b0:	f7ff fde2 	bl	8000578 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	42b8      	cmp	r0, r7
 80009b8:	d9f5      	bls.n	80009a6 <HAL_RCC_ClockConfig+0xde>
 80009ba:	e7d9      	b.n	8000970 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009bc:	f7ff fddc 	bl	8000578 <HAL_GetTick>
 80009c0:	1b80      	subs	r0, r0, r6
 80009c2:	42b8      	cmp	r0, r7
 80009c4:	d8d4      	bhi.n	8000970 <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009c6:	68ab      	ldr	r3, [r5, #8]
 80009c8:	f013 0f0c 	tst.w	r3, #12
 80009cc:	d1f6      	bne.n	80009bc <HAL_RCC_ClockConfig+0xf4>
 80009ce:	e788      	b.n	80008e2 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d0:	b2ca      	uxtb	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	428b      	cmp	r3, r1
 80009dc:	d19e      	bne.n	800091c <HAL_RCC_ClockConfig+0x54>
 80009de:	e786      	b.n	80008ee <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009e0:	4904      	ldr	r1, [pc, #16]	; (80009f4 <HAL_RCC_ClockConfig+0x12c>)
 80009e2:	68e3      	ldr	r3, [r4, #12]
 80009e4:	688a      	ldr	r2, [r1, #8]
 80009e6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80009ea:	431a      	orrs	r2, r3
 80009ec:	608a      	str	r2, [r1, #8]
 80009ee:	e781      	b.n	80008f4 <HAL_RCC_ClockConfig+0x2c>
 80009f0:	40023c00 	.word	0x40023c00
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000bb4 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a00:	4a6d      	ldr	r2, [pc, #436]	; (8000bb8 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a02:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000bbc <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a08:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8000a0a:	2701      	movs	r7, #1
 8000a0c:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0e:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000a12:	ea37 0404 	bics.w	r4, r7, r4
 8000a16:	f040 80b9 	bne.w	8000b8c <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1a:	684c      	ldr	r4, [r1, #4]
 8000a1c:	f024 0a10 	bic.w	sl, r4, #16
 8000a20:	f1ba 0f02 	cmp.w	sl, #2
 8000a24:	d116      	bne.n	8000a54 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8000a26:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000a2a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a2e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a32:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a36:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a3a:	f04f 0c0f 	mov.w	ip, #15
 8000a3e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a42:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a46:	690e      	ldr	r6, [r1, #16]
 8000a48:	fa06 f60b 	lsl.w	r6, r6, fp
 8000a4c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a50:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000a54:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a5c:	f04f 0c03 	mov.w	ip, #3
 8000a60:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000a64:	ea2b 0b0c 	bic.w	fp, fp, ip
 8000a68:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6c:	f004 0c03 	and.w	ip, r4, #3
 8000a70:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a78:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000a80:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a84:	d816      	bhi.n	8000ab4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8000a86:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a8a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a8e:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a92:	fa0a fa0e 	lsl.w	sl, sl, lr
 8000a96:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000a9a:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9e:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa6:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000aaa:	fa0c fc03 	lsl.w	ip, ip, r3
 8000aae:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000ab2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ab4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab8:	688e      	ldr	r6, [r1, #8]
 8000aba:	fa06 f60e 	lsl.w	r6, r6, lr
 8000abe:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000ac0:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac2:	00e6      	lsls	r6, r4, #3
 8000ac4:	d562      	bpl.n	8000b8c <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	9601      	str	r6, [sp, #4]
 8000aca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ace:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ad2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ad6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ada:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ade:	9701      	str	r7, [sp, #4]
 8000ae0:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ae2:	f023 0703 	bic.w	r7, r3, #3
 8000ae6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000aea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aee:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000af2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000afa:	f04f 0c0f 	mov.w	ip, #15
 8000afe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b02:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b06:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8000bc0 <HAL_GPIO_Init+0x1c8>
 8000b0a:	4550      	cmp	r0, sl
 8000b0c:	d01d      	beq.n	8000b4a <HAL_GPIO_Init+0x152>
 8000b0e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b12:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 8000b16:	42b0      	cmp	r0, r6
 8000b18:	d03f      	beq.n	8000b9a <HAL_GPIO_Init+0x1a2>
 8000b1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b1e:	42b0      	cmp	r0, r6
 8000b20:	d03d      	beq.n	8000b9e <HAL_GPIO_Init+0x1a6>
 8000b22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b26:	42b0      	cmp	r0, r6
 8000b28:	d03b      	beq.n	8000ba2 <HAL_GPIO_Init+0x1aa>
 8000b2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b2e:	42b0      	cmp	r0, r6
 8000b30:	d039      	beq.n	8000ba6 <HAL_GPIO_Init+0x1ae>
 8000b32:	4548      	cmp	r0, r9
 8000b34:	d039      	beq.n	8000baa <HAL_GPIO_Init+0x1b2>
 8000b36:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000b3a:	42b0      	cmp	r0, r6
 8000b3c:	d037      	beq.n	8000bae <HAL_GPIO_Init+0x1b6>
 8000b3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b42:	42b0      	cmp	r0, r6
 8000b44:	bf0c      	ite	eq
 8000b46:	2607      	moveq	r6, #7
 8000b48:	2608      	movne	r6, #8
 8000b4a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b4e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b52:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000b54:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b56:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	bf0c      	ite	eq
 8000b5e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b60:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000b62:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000b64:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	bf0c      	ite	eq
 8000b6c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b6e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000b70:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b72:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b78:	bf0c      	ite	eq
 8000b7a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b7c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000b7e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b82:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b84:	bf54      	ite	pl
 8000b86:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000b88:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000b8a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	2b10      	cmp	r3, #16
 8000b90:	f47f af3a 	bne.w	8000a08 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8000b94:	b003      	add	sp, #12
 8000b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9a:	2601      	movs	r6, #1
 8000b9c:	e7d5      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000b9e:	2602      	movs	r6, #2
 8000ba0:	e7d3      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000ba2:	2603      	movs	r6, #3
 8000ba4:	e7d1      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000ba6:	2604      	movs	r6, #4
 8000ba8:	e7cf      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000baa:	2605      	movs	r6, #5
 8000bac:	e7cd      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000bae:	2606      	movs	r6, #6
 8000bb0:	e7cb      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40013c00 	.word	0x40013c00
 8000bbc:	40021400 	.word	0x40021400
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc4:	b10a      	cbz	r2, 8000bca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	6181      	str	r1, [r0, #24]
  }
}
 8000bc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bca:	0409      	lsls	r1, r1, #16
 8000bcc:	e7fb      	b.n	8000bc6 <HAL_GPIO_WritePin+0x2>
 8000bce:	0000      	movs	r0, r0

08000bd0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d066      	beq.n	8000ca4 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8000bd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000bda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bde:	b90b      	cbnz	r3, 8000be4 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000be0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000be4:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000be6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000be8:	6905      	ldr	r5, [r0, #16]
 8000bea:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 8000bec:	2324      	movs	r3, #36	; 0x24
 8000bee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000bf2:	68cb      	ldr	r3, [r1, #12]
 8000bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bf8:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 8000bfa:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000bfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000c00:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000c02:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c04:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 8000c06:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000c0c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c10:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000c12:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c16:	4323      	orrs	r3, r4
 8000c18:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000c1a:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 8000c1c:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 8000c1e:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000c24:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c26:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000c2a:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c2e:	6843      	ldr	r3, [r0, #4]
 8000c30:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c34:	d128      	bne.n	8000c88 <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c3c:	fbb2 f6f5 	udiv	r6, r2, r5
 8000c40:	fb05 2216 	mls	r2, r5, r6, r2
 8000c44:	00d3      	lsls	r3, r2, #3
 8000c46:	3332      	adds	r3, #50	; 0x32
 8000c48:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c4c:	f003 0207 	and.w	r2, r3, #7
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8000c56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c5a:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000c5c:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c5e:	690b      	ldr	r3, [r1, #16]
 8000c60:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000c64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c66:	694b      	ldr	r3, [r1, #20]
 8000c68:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000c6c:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c6e:	68cb      	ldr	r3, [r1, #12]
 8000c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c74:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 8000c76:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c7c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c80:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8000c84:	4618      	mov	r0, r3
}
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c8e:	fbb2 f6f5 	udiv	r6, r2, r5
 8000c92:	fb05 2316 	mls	r3, r5, r6, r2
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	3332      	adds	r3, #50	; 0x32
 8000c9a:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c9e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8000ca2:	e7db      	b.n	8000c5c <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	e7ee      	b.n	8000c86 <HAL_UART_Init+0xb6>
 8000ca8:	0afb6e90 	.word	0x0afb6e90

08000cac <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000cac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000cb0:	2b20      	cmp	r3, #32
 8000cb2:	d13e      	bne.n	8000d32 <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d03a      	beq.n	8000d2e <HAL_UART_Transmit+0x82>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d038      	beq.n	8000d2e <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000cbc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d036      	beq.n	8000d32 <HAL_UART_Transmit+0x86>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cce:	2321      	movs	r3, #33	; 0x21
 8000cd0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000cd4:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8000cd6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cd8:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000cda:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	b952      	cbnz	r2, 8000cf6 <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	0652      	lsls	r2, r2, #25
 8000ce4:	d5fc      	bpl.n	8000ce0 <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000cec:	2300      	movs	r3, #0
 8000cee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	4770      	bx	lr
      huart->TxXferCount--;
 8000cf6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cfe:	6882      	ldr	r2, [r0, #8]
 8000d00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000d04:	d10c      	bne.n	8000d20 <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	0612      	lsls	r2, r2, #24
 8000d0a:	d5fc      	bpl.n	8000d06 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d0c:	880a      	ldrh	r2, [r1, #0]
 8000d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d12:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d14:	6902      	ldr	r2, [r0, #16]
 8000d16:	b90a      	cbnz	r2, 8000d1c <HAL_UART_Transmit+0x70>
          pData +=2U;
 8000d18:	3102      	adds	r1, #2
 8000d1a:	e7de      	b.n	8000cda <HAL_UART_Transmit+0x2e>
          pData +=1U;
 8000d1c:	3101      	adds	r1, #1
 8000d1e:	e7dc      	b.n	8000cda <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	0612      	lsls	r2, r2, #24
 8000d24:	d5fc      	bpl.n	8000d20 <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	e7d5      	b.n	8000cda <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8000d32:	2002      	movs	r0, #2
  }
}
 8000d34:	4770      	bx	lr

08000d36 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d36:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8000d38:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d144      	bne.n	8000dca <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d040      	beq.n	8000dc6 <HAL_UART_Receive+0x90>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d03e      	beq.n	8000dc6 <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000d48:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d03c      	beq.n	8000dca <HAL_UART_Receive+0x94>
 8000d50:	2301      	movs	r3, #1
 8000d52:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d5a:	2322      	movs	r3, #34	; 0x22
 8000d5c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8000d60:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000d62:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8000d64:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b933      	cbnz	r3, 8000d78 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d70:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8000d74:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000d76:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8000d78:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000d7a:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d82:	6883      	ldr	r3, [r0, #8]
 8000d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d88:	d111      	bne.n	8000dae <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000d8a:	6813      	ldr	r3, [r2, #0]
 8000d8c:	069c      	lsls	r4, r3, #26
 8000d8e:	d5fc      	bpl.n	8000d8a <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d90:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d92:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d94:	b933      	cbnz	r3, 8000da4 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d96:	460b      	mov	r3, r1
 8000d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d9c:	f823 2b02 	strh.w	r2, [r3], #2
{
 8000da0:	4619      	mov	r1, r3
 8000da2:	e7df      	b.n	8000d64 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000da4:	460b      	mov	r3, r1
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 8000dac:	e7f8      	b.n	8000da0 <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	069b      	lsls	r3, r3, #26
 8000db2:	d5fc      	bpl.n	8000dae <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000db4:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000db6:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8000db8:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000dba:	b90c      	cbnz	r4, 8000dc0 <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000dbc:	700a      	strb	r2, [r1, #0]
 8000dbe:	e7ef      	b.n	8000da0 <HAL_UART_Receive+0x6a>
 8000dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dc4:	e7fa      	b.n	8000dbc <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e7d5      	b.n	8000d76 <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 8000dca:	2002      	movs	r0, #2
 8000dcc:	e7d3      	b.n	8000d76 <HAL_UART_Receive+0x40>

08000dce <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_RNG_Init>:
{ 
 8000dd0:	b510      	push	{r4, lr}
  if(hrng == NULL)
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	b1a8      	cbz	r0, 8000e02 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 8000dd6:	7903      	ldrb	r3, [r0, #4]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d014      	beq.n	8000e06 <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 8000ddc:	7943      	ldrb	r3, [r0, #5]
 8000dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000de2:	b913      	cbnz	r3, 8000dea <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 8000de4:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8000de6:	f7ff fff2 	bl	8000dce <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 8000dea:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8000dec:	2302      	movs	r3, #2
 8000dee:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 8000df8:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8000dfe:	7120      	strb	r0, [r4, #4]
}
 8000e00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
 8000e04:	e7fc      	b.n	8000e00 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 8000e06:	2002      	movs	r0, #2
 8000e08:	e7fa      	b.n	8000e00 <HAL_RNG_Init+0x30>
 8000e0a:	0000      	movs	r0, r0

08000e0c <Reset_Handler>:
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LoopForever+0x2>)
 8000e12:	585b      	ldr	r3, [r3, r1]
 8000e14:	5043      	str	r3, [r0, r1]
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <LoopForever+0x6>)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <LoopForever+0xa>)
 8000e1c:	1842      	adds	r2, r0, r1
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0xe>)
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
 8000e26:	2300      	movs	r3, #0
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	3204      	adds	r2, #4

08000e2c <LoopFillZerobss>:
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LoopForever+0x12>)
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>
 8000e32:	f3af 8000 	nop.w
 8000e36:	f7ff fa01 	bl	800023c <__libc_init_array>
 8000e3a:	f7ff fa59 	bl	80002f0 <main>

08000e3e <LoopForever>:
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
 8000e40:	08000f94 	.word	0x08000f94
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	200000bc 	.word	0x200000bc

08000e54 <BusFault_Handler>:
 8000e54:	e7fe      	b.n	8000e54 <BusFault_Handler>
 8000e56:	0000      	movs	r0, r0

08000e58 <_init>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr

08000e64 <_fini>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr
