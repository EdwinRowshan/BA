   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"basic-passwdcheck.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.delay_2_ms,"ax",%progbits
  16              		.align	1
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	delay_2_ms:
  24              	.LFB6:
  25              		.file 1 "basic-passwdcheck.c"
   1:basic-passwdcheck.c **** /*
   2:basic-passwdcheck.c ****     This file is part of the ChipWhisperer Example Targets
   3:basic-passwdcheck.c ****     Copyright (C) 2012-2015 NewAE Technology Inc.
   4:basic-passwdcheck.c **** 
   5:basic-passwdcheck.c ****     This program is free software: you can redistribute it and/or modify
   6:basic-passwdcheck.c ****     it under the terms of the GNU General Public License as published by
   7:basic-passwdcheck.c ****     the Free Software Foundation, either version 3 of the License, or
   8:basic-passwdcheck.c ****     (at your option) any later version.
   9:basic-passwdcheck.c **** 
  10:basic-passwdcheck.c ****     This program is distributed in the hope that it will be useful,
  11:basic-passwdcheck.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:basic-passwdcheck.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:basic-passwdcheck.c ****     GNU General Public License for more details.
  14:basic-passwdcheck.c **** 
  15:basic-passwdcheck.c ****     You should have received a copy of the GNU General Public License
  16:basic-passwdcheck.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:basic-passwdcheck.c **** */
  18:basic-passwdcheck.c **** 
  19:basic-passwdcheck.c **** #include "hal.h"
  20:basic-passwdcheck.c **** #include <stdint.h>
  21:basic-passwdcheck.c **** #include <stdlib.h>
  22:basic-passwdcheck.c **** #include <stdio.h>
  23:basic-passwdcheck.c **** 
  24:basic-passwdcheck.c **** #define IDLE 0
  25:basic-passwdcheck.c **** #define KEY 1
  26:basic-passwdcheck.c **** #define PLAIN 2
  27:basic-passwdcheck.c **** 
  28:basic-passwdcheck.c **** #define BUFLEN 64
  29:basic-passwdcheck.c **** 
  30:basic-passwdcheck.c **** uint8_t memory[BUFLEN];
  31:basic-passwdcheck.c **** uint8_t tmp[BUFLEN];
  32:basic-passwdcheck.c **** char asciibuf[BUFLEN];
  33:basic-passwdcheck.c **** uint8_t pt[16];
  34:basic-passwdcheck.c **** 
  35:basic-passwdcheck.c **** static void delay_2_ms(void);
  36:basic-passwdcheck.c **** 
  37:basic-passwdcheck.c **** 
  38:basic-passwdcheck.c **** void my_puts(char *c)
  39:basic-passwdcheck.c **** {
  40:basic-passwdcheck.c ****   do {
  41:basic-passwdcheck.c ****     putch(*c);
  42:basic-passwdcheck.c **** 
  43:basic-passwdcheck.c ****   } while (*++c);
  44:basic-passwdcheck.c **** }
  45:basic-passwdcheck.c **** 
  46:basic-passwdcheck.c **** static void delay_2_ms()
  47:basic-passwdcheck.c **** {
  26              		.loc 1 47 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  48:basic-passwdcheck.c ****   for (volatile unsigned int i=0; i < 0xfff; i++ ){
  31              		.loc 1 48 3 view .LVU1
  32              	.LBB2:
  33              		.loc 1 48 8 view .LVU2
  34              	.LBE2:
  47:basic-passwdcheck.c ****   for (volatile unsigned int i=0; i < 0xfff; i++ ){
  35              		.loc 1 47 1 is_stmt 0 view .LVU3
  36 0000 82B0     		sub	sp, sp, #8
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              	.LBB3:
  40              		.loc 1 48 30 view .LVU4
  41 0002 0023     		movs	r3, #0
  42 0004 0193     		str	r3, [sp, #4]
  43              		.loc 1 48 3 view .LVU5
  44 0006 40F6FE72 		movw	r2, #4094
  45              	.L2:
  46              		.loc 1 48 35 is_stmt 1 discriminator 1 view .LVU6
  47              		.loc 1 48 37 is_stmt 0 discriminator 1 view .LVU7
  48 000a 019B     		ldr	r3, [sp, #4]
  49              		.loc 1 48 3 discriminator 1 view .LVU8
  50 000c 9342     		cmp	r3, r2
  51 000e 01D9     		bls	.L3
  52              	.LBE3:
  49:basic-passwdcheck.c ****     ;
  50:basic-passwdcheck.c ****   }
  51:basic-passwdcheck.c **** }
  53              		.loc 1 51 1 view .LVU9
  54 0010 02B0     		add	sp, sp, #8
  55              	.LCFI1:
  56              		.cfi_remember_state
  57              		.cfi_def_cfa_offset 0
  58              		@ sp needed
  59 0012 7047     		bx	lr
  60              	.L3:
  61              	.LCFI2:
  62              		.cfi_restore_state
  63              	.LBB4:
  49:basic-passwdcheck.c ****     ;
  64              		.loc 1 49 5 is_stmt 1 discriminator 3 view .LVU10
  48:basic-passwdcheck.c ****     ;
  65              		.loc 1 48 46 discriminator 3 view .LVU11
  48:basic-passwdcheck.c ****     ;
  66              		.loc 1 48 47 is_stmt 0 discriminator 3 view .LVU12
  67 0014 019B     		ldr	r3, [sp, #4]
  68 0016 0133     		adds	r3, r3, #1
  69 0018 0193     		str	r3, [sp, #4]
  70 001a F6E7     		b	.L2
  71              	.LBE4:
  72              		.cfi_endproc
  73              	.LFE6:
  75              		.section	.text.led_ok,"ax",%progbits
  76              		.align	1
  77              		.weak	led_ok
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  83              	led_ok:
  84              	.LVL0:
  85              	.LFB0:
  86              		.file 2 ".././hal/hal.h"
   1:.././hal/hal.h **** /*
   2:.././hal/hal.h ****     This file is part of the ChipWhisperer Example Targets
   3:.././hal/hal.h ****     Copyright (C) 2012-2015 NewAE Technology Inc.
   4:.././hal/hal.h **** 
   5:.././hal/hal.h ****     This program is free software: you can redistribute it and/or modify
   6:.././hal/hal.h ****     it under the terms of the GNU General Public License as published by
   7:.././hal/hal.h ****     the Free Software Foundation, either version 3 of the License, or
   8:.././hal/hal.h ****     (at your option) any later version.
   9:.././hal/hal.h **** 
  10:.././hal/hal.h ****     This program is distributed in the hope that it will be useful,
  11:.././hal/hal.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././hal/hal.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././hal/hal.h ****     GNU General Public License for more details.
  14:.././hal/hal.h **** 
  15:.././hal/hal.h ****     You should have received a copy of the GNU General Public License
  16:.././hal/hal.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././hal/hal.h **** */
  18:.././hal/hal.h **** 
  19:.././hal/hal.h **** #ifndef HAL_H_
  20:.././hal/hal.h **** #define HAL_H_
  21:.././hal/hal.h **** 
  22:.././hal/hal.h **** #include <stdint.h>
  23:.././hal/hal.h **** 
  24:.././hal/hal.h **** void platform_init(void);
  25:.././hal/hal.h **** 
  26:.././hal/hal.h **** //PLATFORM Define Types
  27:.././hal/hal.h **** #define CW301_AVR      1
  28:.././hal/hal.h **** #define CW301_XMEGA    2
  29:.././hal/hal.h **** #define CW303          3
  30:.././hal/hal.h **** #define CW304          4
  31:.././hal/hal.h **** #define CW308_MEGARF   8
  32:.././hal/hal.h **** #define CW308_PIC24FJ  10
  33:.././hal/hal.h **** #define CW308_SAM4L    11
  34:.././hal/hal.h **** #define CW308_SI4010   12
  35:.././hal/hal.h **** #define CW308_MPC5748G 13
  36:.././hal/hal.h **** #define CW308_STM32F0  14
  37:.././hal/hal.h **** #define CW308_STM32F1  15
  38:.././hal/hal.h **** #define CW308_STM32F2  16
  39:.././hal/hal.h **** #define CW308_STM32F3  17
  40:.././hal/hal.h **** #define CW308_STM32F4  18
  41:.././hal/hal.h **** #define CW308_CC2538   19
  42:.././hal/hal.h **** #define CW308_K24F     20
  43:.././hal/hal.h **** #define CW308_NRF52840 21
  44:.././hal/hal.h **** #define CW308_AURIX    22
  45:.././hal/hal.h **** #define CW308_SAML11   23
  46:.././hal/hal.h **** #define CW308_EFM32TG11B 24
  47:.././hal/hal.h **** #define CW308_K82F     25
  48:.././hal/hal.h **** #define CW308_LPC55S6X 26
  49:.././hal/hal.h **** #define CW308_PSOC62   27
  50:.././hal/hal.h **** #define CW308_IMXRT1062 28
  51:.././hal/hal.h **** #define CW308_FE310    29
  52:.././hal/hal.h **** #define CW308_EFR32MG21A  30
  53:.././hal/hal.h **** #define CW308_EFM32GG11  31
  54:.././hal/hal.h **** #define CW308_STM32L5  32
  55:.././hal/hal.h **** #define CW308_STM32L4  33
  56:.././hal/hal.h **** #define CW308_RX65N  34
  57:.././hal/hal.h **** #define CW308_MPC5676R 35
  58:.././hal/hal.h **** #define CW308_NEORV32  36
  59:.././hal/hal.h **** #define CW305_IBEX  37
  60:.././hal/hal.h **** 
  61:.././hal/hal.h **** //HAL_TYPE Define Types
  62:.././hal/hal.h **** #define HAL_avr      1
  63:.././hal/hal.h **** #define HAL_xmega    2
  64:.././hal/hal.h **** #define HAL_pic24f   3
  65:.././hal/hal.h **** #define HAL_sam4l    4
  66:.././hal/hal.h **** #define HAL_stm32f0  5
  67:.././hal/hal.h **** #define HAL_stm32f1  6
  68:.././hal/hal.h **** #define HAL_stm32f2  7
  69:.././hal/hal.h **** #define HAL_stm32f3  8
  70:.././hal/hal.h **** #define HAL_stm32f4  9
  71:.././hal/hal.h **** #define HAL_cc2538   10
  72:.././hal/hal.h **** #define HAL_k24f     11
  73:.././hal/hal.h **** #define HAL_nrf52840 12
  74:.././hal/hal.h **** #define HAL_stm32f0_nano 13
  75:.././hal/hal.h **** #define HAL_aurix    14
  76:.././hal/hal.h **** #define HAL_saml11   15
  77:.././hal/hal.h **** #define HAL_efm32tg11b 16
  78:.././hal/hal.h **** #define HAL_k82f     17
  79:.././hal/hal.h **** #define HAL_lpc55s6x 18
  80:.././hal/hal.h **** #define HAL_psoc62   19
  81:.././hal/hal.h **** #define HAL_imxrt1062 20
  82:.././hal/hal.h **** #define HAL_fe310    21
  83:.././hal/hal.h **** #define HAL_efr32mg21a 22
  84:.././hal/hal.h **** #define HAL_efm32gg11 23
  85:.././hal/hal.h **** #define HAL_stm32l5 24
  86:.././hal/hal.h **** #define HAL_stm32l4 25
  87:.././hal/hal.h **** #define HAL_rx65n 26
  88:.././hal/hal.h **** #define HAL_mpc5676r 27
  89:.././hal/hal.h **** #define HAL_neorv32  28
  90:.././hal/hal.h **** #define HAL_sam4s  29
  91:.././hal/hal.h **** #define HAL_ibex  30
  92:.././hal/hal.h **** 
  93:.././hal/hal.h **** #if HAL_TYPE == HAL_avr
  94:.././hal/hal.h ****     #include <avr/io.h>
  95:.././hal/hal.h ****     #include <util/delay.h>
  96:.././hal/hal.h ****     #include "avr/avr_hal.h"
  97:.././hal/hal.h **** #elif HAL_TYPE == HAL_xmega
  98:.././hal/hal.h ****     #include <avr/io.h>
  99:.././hal/hal.h ****     #include <util/delay.h>
 100:.././hal/hal.h ****     #include "xmega/xmega_hal.h"
 101:.././hal/hal.h ****     #include "xmega/avr_compiler.h"
 102:.././hal/hal.h **** #elif HAL_TYPE == HAL_pic24f
 103:.././hal/hal.h ****     #include <xc.h>
 104:.././hal/hal.h ****     #include "pic24f/pic24f_hal.h"
 105:.././hal/hal.h ****     #include "pic24f/uart.h"
 106:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4l
 107:.././hal/hal.h ****     #include "sam4l/sam4l_hal.h"
 108:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0
 109:.././hal/hal.h **** 	#include "stm32f0/stm32f0_hal.h"
 110:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f1
 111:.././hal/hal.h **** 	#include "stm32f1/stm32f1_hal.h"
 112:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f2
 113:.././hal/hal.h **** 	#include "stm32f2/stm32f2_hal.h"
 114:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f3
 115:.././hal/hal.h **** 	#include "stm32f3/stm32f3_hal.h"
 116:.././hal/hal.h **** 	#ifdef SECCAN
 117:.././hal/hal.h **** 		#include "stm32f3/stm32f3_hal_seccan.h"
 118:.././hal/hal.h **** 	#endif
 119:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f4
 120:.././hal/hal.h **** 	#include "stm32f4/stm32f4_hal.h"
 121:.././hal/hal.h **** #elif HAL_TYPE == HAL_cc2538
 122:.././hal/hal.h **** 	#include "cc2538/cc2538_hal.h"
 123:.././hal/hal.h **** #elif HAL_TYPE == HAL_k24f
 124:.././hal/hal.h ****     #include "k24f/k24f_hal.h"
 125:.././hal/hal.h **** #elif HAL_TYPE == HAL_k82f
 126:.././hal/hal.h **** #include "k82f/k82f_hal.h"
 127:.././hal/hal.h **** #elif HAL_TYPE == HAL_nrf52840
 128:.././hal/hal.h ****     #include "nrf52840/nrf52840_hal.h"   
 129:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0_nano
 130:.././hal/hal.h ****     #include "stm32f0/stm32f0_hal.h" 
 131:.././hal/hal.h ****     void led_error(unsigned int status);
 132:.././hal/hal.h ****     void led_ok(unsigned int status);
 133:.././hal/hal.h **** #elif HAL_TYPE == HAL_aurix
 134:.././hal/hal.h ****     #include "aurix/aurix_hal.h"
 135:.././hal/hal.h **** #elif HAL_TYPE == HAL_saml11
 136:.././hal/hal.h ****      #include "saml11/saml11_hal.h"
 137:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32tg11b
 138:.././hal/hal.h ****      #include "efm32tg11b/efm32tg11b_hal.h"
 139:.././hal/hal.h **** #elif HAL_TYPE == HAL_lpc55s6x
 140:.././hal/hal.h ****      #include "lpc55s6x/lpc55s6x_hal.h"
 141:.././hal/hal.h **** #elif HAL_TYPE == HAL_psoc62
 142:.././hal/hal.h ****     #include "psoc62/psoc62_hal.h"
 143:.././hal/hal.h **** #elif HAL_TYPE == HAL_imxrt1062
 144:.././hal/hal.h ****     #include "imxrt1062/imxrt1062_hal.h"
 145:.././hal/hal.h **** #elif HAL_TYPE == HAL_fe310
 146:.././hal/hal.h ****     #include "fe310/fe310_hal.h"
 147:.././hal/hal.h **** #elif HAL_TYPE == HAL_efr32mg21a
 148:.././hal/hal.h ****     #include "efr32mg21a/efr32mg21a_hal.h"
 149:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32gg11
 150:.././hal/hal.h ****     #include "efm32gg11/efm32gg11_hal.h"
 151:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l5
 152:.././hal/hal.h ****     #include "stm32l5/stm32l5_hal.h"
 153:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l4
 154:.././hal/hal.h ****     #include "stm32l4/stm32l4_hal.h"
 155:.././hal/hal.h **** #elif HAL_TYPE == HAL_rx65n
 156:.././hal/hal.h ****     #include "rx65n/rx65n_hal.h"
 157:.././hal/hal.h **** #elif HAL_TYPE == HAL_mpc5676r
 158:.././hal/hal.h ****     #include "mpc5676r/MPC5676R_hal.h"
 159:.././hal/hal.h **** #elif HAL_TYPE == HAL_neorv32
 160:.././hal/hal.h ****     #include "neorv32/neorv32_hal.h"
 161:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4s
 162:.././hal/hal.h ****     #include "sam4s/sam4s_hal.h"
 163:.././hal/hal.h **** #elif HAL_TYPE == HAL_ibex
 164:.././hal/hal.h ****     #include "ibex/ibex_hal.h"
 165:.././hal/hal.h **** #else
 166:.././hal/hal.h ****     #error "Unsupported HAL Type"
 167:.././hal/hal.h **** #endif
 168:.././hal/hal.h **** 
 169:.././hal/hal.h **** #if PLATFORM == CW308_MEGARF
 170:.././hal/hal.h ****     #undef trigger_setup
 171:.././hal/hal.h ****     #undef trigger_high
 172:.././hal/hal.h ****     #undef trigger_low
 173:.././hal/hal.h ****     #define trigger_setup() DDRD |= 0x02
 174:.././hal/hal.h ****     #define trigger_high()  PORTD |= 0x02
 175:.././hal/hal.h ****     #define trigger_low()   PORTD &= ~(0x02)
 176:.././hal/hal.h ****     
 177:.././hal/hal.h ****     #define HW_AES128_Init();      AES_CTRL = 0x00;
 178:.././hal/hal.h **** 
 179:.././hal/hal.h ****     #define HW_AES128_LoadKey(key);  for (uint8_t i = 0; i < 16; i++){ \
 180:.././hal/hal.h ****                                      AES_KEY = *(key+i); \
 181:.././hal/hal.h ****                                   }
 182:.././hal/hal.h **** 
 183:.././hal/hal.h ****     #define HW_AES128_Enc(pt);  for (uint8_t i = 0; i < 16; i++){ \
 184:.././hal/hal.h ****                                     AES_STATE = *(pt+i); \
 185:.././hal/hal.h ****                                 } \
 186:.././hal/hal.h ****                                   \
 187:.././hal/hal.h ****                                 AES_CTRL |= 1<<AES_REQUEST; \
 188:.././hal/hal.h ****                                   \
 189:.././hal/hal.h ****                                 /*Wait for done  */ \
 190:.././hal/hal.h ****                                 while ((AES_STATUS & (1<<AES_DONE)) == 0){ \
 191:.././hal/hal.h ****                                     ; \
 192:.././hal/hal.h ****                                 } \
 193:.././hal/hal.h ****                                   \
 194:.././hal/hal.h ****                                 for (uint8_t i = 0; i < 16; i++){ \
 195:.././hal/hal.h ****                                     *(pt+i) = AES_STATE; \
 196:.././hal/hal.h ****                                 }
 197:.././hal/hal.h ****     
 198:.././hal/hal.h **** #endif
 199:.././hal/hal.h **** 
 200:.././hal/hal.h **** __attribute__((weak)) void led_ok(unsigned int status)
 201:.././hal/hal.h **** {
  87              		.loc 2 201 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 202:.././hal/hal.h **** }
  92              		.loc 2 202 1 view .LVU14
  93 0000 7047     		bx	lr
  94              		.cfi_endproc
  95              	.LFE0:
  97              		.section	.text.led_error,"ax",%progbits
  98              		.align	1
  99              		.weak	led_error
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu softvfp
 105              	led_error:
 106              	.LFB10:
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111 0000 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE10:
 115              		.section	.text.my_puts,"ax",%progbits
 116              		.align	1
 117              		.global	my_puts
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu softvfp
 123              	my_puts:
 124              	.LVL1:
 125              	.LFB5:
  39:basic-passwdcheck.c ****   do {
 126              		.loc 1 39 1 view -0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
  39:basic-passwdcheck.c ****   do {
 130              		.loc 1 39 1 is_stmt 0 view .LVU16
 131 0000 10B5     		push	{r4, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
 136 0002 0446     		mov	r4, r0
 137              	.LVL2:
 138              	.L7:
  40:basic-passwdcheck.c ****     putch(*c);
 139              		.loc 1 40 3 is_stmt 1 discriminator 1 view .LVU17
  41:basic-passwdcheck.c **** 
 140              		.loc 1 41 5 discriminator 1 view .LVU18
 141 0004 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 142 0006 FFF7FEFF 		bl	putch
 143              	.LVL3:
  43:basic-passwdcheck.c **** }
 144              		.loc 1 43 11 discriminator 1 view .LVU19
  43:basic-passwdcheck.c **** }
 145              		.loc 1 43 3 is_stmt 0 discriminator 1 view .LVU20
 146 000a 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 147              	.LVL4:
  43:basic-passwdcheck.c **** }
 148              		.loc 1 43 3 discriminator 1 view .LVU21
 149 000e 002B     		cmp	r3, #0
 150 0010 F8D1     		bne	.L7
  44:basic-passwdcheck.c **** 
 151              		.loc 1 44 1 view .LVU22
 152 0012 10BD     		pop	{r4, pc}
  44:basic-passwdcheck.c **** 
 153              		.loc 1 44 1 view .LVU23
 154              		.cfi_endproc
 155              	.LFE5:
 157              		.section	.text.my_read,"ax",%progbits
 158              		.align	1
 159              		.global	my_read
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	my_read:
 166              	.LVL5:
 167              	.LFB7:
  52:basic-passwdcheck.c **** 
  53:basic-passwdcheck.c **** void my_read(char *buf, int len)
  54:basic-passwdcheck.c **** {
 168              		.loc 1 54 1 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
  55:basic-passwdcheck.c ****   for(int i = 0; i < len; i++) {
 172              		.loc 1 55 3 view .LVU25
 173              	.LBB5:
 174              		.loc 1 55 7 view .LVU26
 175              		.loc 1 55 7 is_stmt 0 view .LVU27
 176              	.LBE5:
  54:basic-passwdcheck.c ****   for(int i = 0; i < len; i++) {
 177              		.loc 1 54 1 view .LVU28
 178 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 179              	.LCFI4:
 180              		.cfi_def_cfa_offset 24
 181              		.cfi_offset 3, -24
 182              		.cfi_offset 4, -20
 183              		.cfi_offset 5, -16
 184              		.cfi_offset 6, -12
 185              		.cfi_offset 7, -8
 186              		.cfi_offset 14, -4
  54:basic-passwdcheck.c ****   for(int i = 0; i < len; i++) {
 187              		.loc 1 54 1 view .LVU29
 188 0002 0446     		mov	r4, r0
 189 0004 0E46     		mov	r6, r1
 190              	.LBB6:
 191              		.loc 1 55 11 view .LVU30
 192 0006 0025     		movs	r5, #0
 193              	.LVL6:
 194              	.L10:
 195              		.loc 1 55 18 is_stmt 1 discriminator 1 view .LVU31
 196              		.loc 1 55 3 is_stmt 0 discriminator 1 view .LVU32
 197 0008 B542     		cmp	r5, r6
 198 000a 0CDA     		bge	.L17
 199 000c 6719     		adds	r7, r4, r5
 200              	.L11:
  56:basic-passwdcheck.c ****     while (buf[i] = getch(), buf[i] == '\0');
 201              		.loc 1 56 45 is_stmt 1 discriminator 1 view .LVU33
 202              		.loc 1 56 11 discriminator 1 view .LVU34
 203              		.loc 1 56 21 is_stmt 0 discriminator 1 view .LVU35
 204 000e FFF7FEFF 		bl	getch
 205              	.LVL7:
 206              		.loc 1 56 19 discriminator 1 view .LVU36
 207 0012 6055     		strb	r0, [r4, r5]
 208              		.loc 1 56 11 discriminator 1 view .LVU37
 209 0014 0028     		cmp	r0, #0
 210 0016 FAD0     		beq	.L11
  57:basic-passwdcheck.c **** 
  58:basic-passwdcheck.c ****     if (buf[i] == '\n') {
 211              		.loc 1 58 5 is_stmt 1 view .LVU38
 212              		.loc 1 58 8 is_stmt 0 view .LVU39
 213 0018 0A28     		cmp	r0, #10
 214 001a 02D1     		bne	.L12
  59:basic-passwdcheck.c ****       buf[i] = '\0';
 215              		.loc 1 59 7 is_stmt 1 view .LVU40
 216              		.loc 1 59 14 is_stmt 0 view .LVU41
 217 001c 0023     		movs	r3, #0
 218 001e 3B70     		strb	r3, [r7]
  60:basic-passwdcheck.c ****       return;
 219              		.loc 1 60 7 is_stmt 1 view .LVU42
 220              	.LVL8:
 221              	.L9:
 222              		.loc 1 60 7 is_stmt 0 view .LVU43
 223              	.LBE6:
  61:basic-passwdcheck.c ****     }
  62:basic-passwdcheck.c ****   }
  63:basic-passwdcheck.c ****   buf[len - 1] = '\0';
  64:basic-passwdcheck.c **** }
 224              		.loc 1 64 1 view .LVU44
 225 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 226              	.LVL9:
 227              	.L12:
 228              	.LBB7:
  55:basic-passwdcheck.c ****     while (buf[i] = getch(), buf[i] == '\0');
 229              		.loc 1 55 27 is_stmt 1 discriminator 2 view .LVU45
  55:basic-passwdcheck.c ****     while (buf[i] = getch(), buf[i] == '\0');
 230              		.loc 1 55 28 is_stmt 0 discriminator 2 view .LVU46
 231 0022 0135     		adds	r5, r5, #1
 232              	.LVL10:
  55:basic-passwdcheck.c ****     while (buf[i] = getch(), buf[i] == '\0');
 233              		.loc 1 55 28 discriminator 2 view .LVU47
 234 0024 F0E7     		b	.L10
 235              	.L17:
  55:basic-passwdcheck.c ****     while (buf[i] = getch(), buf[i] == '\0');
 236              		.loc 1 55 28 discriminator 2 view .LVU48
 237              	.LBE7:
  63:basic-passwdcheck.c **** }
 238              		.loc 1 63 3 is_stmt 1 view .LVU49
  63:basic-passwdcheck.c **** }
 239              		.loc 1 63 16 is_stmt 0 view .LVU50
 240 0026 3444     		add	r4, r4, r6
 241              	.LVL11:
  63:basic-passwdcheck.c **** }
 242              		.loc 1 63 16 view .LVU51
 243 0028 0023     		movs	r3, #0
 244 002a 04F8013C 		strb	r3, [r4, #-1]
 245 002e F7E7     		b	.L9
 246              		.cfi_endproc
 247              	.LFE7:
 249              		.section	.rodata.str1.1,"aMS",%progbits,1
 250              	.LC1:
 251 0000 2A2A2A2A 		.ascii	"*****Safe-o-matic 3000 Booting...\012\000"
 251      2A536166 
 251      652D6F2D 
 251      6D617469 
 251      63203330 
 252              	.LC2:
 253 0023 416C6967 		.ascii	"Aligning bits........[DONE]\012\000"
 253      6E696E67 
 253      20626974 
 253      732E2E2E 
 253      2E2E2E2E 
 254              	.LC3:
 255 0040 43686563 		.ascii	"Checking Cesium RNG..[DONE]\012\000"
 255      6B696E67 
 255      20436573 
 255      69756D20 
 255      524E472E 
 256              	.LC4:
 257 005d 4D617371 		.ascii	"Masquerading flash...[DONE]\012\000"
 257      75657261 
 257      64696E67 
 257      20666C61 
 257      73682E2E 
 258              	.LC5:
 259 007a 44656372 		.ascii	"Decrypting database..[DONE]\012\000"
 259      79707469 
 259      6E672064 
 259      61746162 
 259      6173652E 
 260              	.LC6:
 261 0097 0A0A00   		.ascii	"\012\012\000"
 262              	.LC7:
 263 009a 5741524E 		.ascii	"WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\012\000"
 263      494E473A 
 263      20554E41 
 263      5554484F 
 263      52495A45 
 264              	.LC8:
 265 00c9 506C6561 		.ascii	"Please enter password to continue: \000"
 265      73652065 
 265      6E746572 
 265      20706173 
 265      73776F72 
 266              	.LC9:
 267 00ed 50415353 		.ascii	"PASSWORD FAIL\012\000"
 267      574F5244 
 267      20464149 
 267      4C0A00
 268              	.LC10:
 269 00fc 41636365 		.ascii	"Access granted, Welcome!\012\000"
 269      73732067 
 269      72616E74 
 269      65642C20 
 269      57656C63 
 270              	.LC0:
 271 0116 68307078 		.ascii	"h0px3\000"
 271      3300
 272              		.section	.text.startup.main,"ax",%progbits
 273              		.align	1
 274              		.global	main
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu softvfp
 280              	main:
 281              	.LFB8:
  65:basic-passwdcheck.c **** 
  66:basic-passwdcheck.c **** int main(void)
  67:basic-passwdcheck.c ****   {
 282              		.loc 1 67 3 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 48
 285              		@ frame_needed = 0, uses_anonymous_args = 0
  68:basic-passwdcheck.c ****     platform_init();
 286              		.loc 1 68 5 view .LVU53
  67:basic-passwdcheck.c ****     platform_init();
 287              		.loc 1 67 3 is_stmt 0 view .LVU54
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 293 0002 8CB0     		sub	sp, sp, #48
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 56
 296              		.loc 1 68 5 view .LVU55
 297 0004 FFF7FEFF 		bl	platform_init
 298              	.LVL12:
  69:basic-passwdcheck.c ****   init_uart();
 299              		.loc 1 69 3 is_stmt 1 view .LVU56
 300 0008 FFF7FEFF 		bl	init_uart
 301              	.LVL13:
  70:basic-passwdcheck.c ****   trigger_setup();
 302              		.loc 1 70 3 view .LVU57
 303 000c FFF7FEFF 		bl	trigger_setup
 304              	.LVL14:
  71:basic-passwdcheck.c **** 
  72:basic-passwdcheck.c ****     char passwd[32];
 305              		.loc 1 72 5 view .LVU58
  73:basic-passwdcheck.c ****     char correct_passwd[] = "h0px3";
 306              		.loc 1 73 5 view .LVU59
 307              		.loc 1 73 10 is_stmt 0 view .LVU60
 308 0010 2A4B     		ldr	r3, .L29
 309 0012 1868     		ldr	r0, [r3]	@ unaligned
 310 0014 0290     		str	r0, [sp, #8]
 311 0016 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 312              	.LBB8:
  74:basic-passwdcheck.c **** 
  75:basic-passwdcheck.c ****   while(1){
  76:basic-passwdcheck.c **** 
  77:basic-passwdcheck.c ****         my_puts("*****Safe-o-matic 3000 Booting...\n");
 313              		.loc 1 77 9 view .LVU61
 314 0018 2948     		ldr	r0, .L29+4
 315              	.LBE8:
  73:basic-passwdcheck.c ****     char correct_passwd[] = "h0px3";
 316              		.loc 1 73 10 view .LVU62
 317 001a ADF80C30 		strh	r3, [sp, #12]	@ unaligned
  75:basic-passwdcheck.c **** 
 318              		.loc 1 75 3 is_stmt 1 view .LVU63
 319              	.LBB15:
 320              		.loc 1 77 9 view .LVU64
 321 001e FFF7FEFF 		bl	my_puts
 322              	.LVL15:
  78:basic-passwdcheck.c ****         //Print some fancy-sounding stuff so that attackers
  79:basic-passwdcheck.c ****         //will get scared and leave us alone
  80:basic-passwdcheck.c ****         my_puts("Aligning bits........[DONE]\n");
 323              		.loc 1 80 9 view .LVU65
 324 0022 2848     		ldr	r0, .L29+8
 325 0024 FFF7FEFF 		bl	my_puts
 326              	.LVL16:
  81:basic-passwdcheck.c ****         delay_2_ms();
 327              		.loc 1 81 9 view .LVU66
  82:basic-passwdcheck.c ****         my_puts("Checking Cesium RNG..[DONE]\n");
 328              		.loc 1 82 9 is_stmt 0 view .LVU67
 329 0028 2748     		ldr	r0, .L29+12
  81:basic-passwdcheck.c ****         delay_2_ms();
 330              		.loc 1 81 9 view .LVU68
 331 002a FFF7FEFF 		bl	delay_2_ms
 332              	.LVL17:
 333              		.loc 1 82 9 is_stmt 1 view .LVU69
 334 002e FFF7FEFF 		bl	my_puts
 335              	.LVL18:
  83:basic-passwdcheck.c ****         delay_2_ms();
 336              		.loc 1 83 9 view .LVU70
  84:basic-passwdcheck.c ****         my_puts("Masquerading flash...[DONE]\n");
 337              		.loc 1 84 9 is_stmt 0 view .LVU71
 338 0032 2648     		ldr	r0, .L29+16
  83:basic-passwdcheck.c ****         delay_2_ms();
 339              		.loc 1 83 9 view .LVU72
 340 0034 FFF7FEFF 		bl	delay_2_ms
 341              	.LVL19:
 342              		.loc 1 84 9 is_stmt 1 view .LVU73
 343 0038 FFF7FEFF 		bl	my_puts
 344              	.LVL20:
  85:basic-passwdcheck.c ****         delay_2_ms();
 345              		.loc 1 85 9 view .LVU74
  86:basic-passwdcheck.c ****         my_puts("Decrypting database..[DONE]\n");
 346              		.loc 1 86 9 is_stmt 0 view .LVU75
 347 003c 2448     		ldr	r0, .L29+20
  85:basic-passwdcheck.c ****         delay_2_ms();
 348              		.loc 1 85 9 view .LVU76
 349 003e FFF7FEFF 		bl	delay_2_ms
 350              	.LVL21:
 351              		.loc 1 86 9 is_stmt 1 view .LVU77
 352 0042 FFF7FEFF 		bl	my_puts
 353              	.LVL22:
  87:basic-passwdcheck.c ****         delay_2_ms();
 354              		.loc 1 87 9 view .LVU78
  88:basic-passwdcheck.c ****         my_puts("\n\n");
 355              		.loc 1 88 9 is_stmt 0 view .LVU79
 356 0046 2348     		ldr	r0, .L29+24
  87:basic-passwdcheck.c ****         delay_2_ms();
 357              		.loc 1 87 9 view .LVU80
 358 0048 FFF7FEFF 		bl	delay_2_ms
 359              	.LVL23:
 360              		.loc 1 88 9 is_stmt 1 view .LVU81
 361 004c FFF7FEFF 		bl	my_puts
 362              	.LVL24:
  89:basic-passwdcheck.c **** 
  90:basic-passwdcheck.c ****         //Give them one last warning
  91:basic-passwdcheck.c ****         my_puts("WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\n");
 363              		.loc 1 91 9 view .LVU82
 364 0050 2148     		ldr	r0, .L29+28
 365 0052 FFF7FEFF 		bl	my_puts
 366              	.LVL25:
  92:basic-passwdcheck.c **** 
  93:basic-passwdcheck.c ****         trigger_low();
 367              		.loc 1 93 9 view .LVU83
 368 0056 FFF7FEFF 		bl	trigger_low
 369              	.LVL26:
  94:basic-passwdcheck.c **** 
  95:basic-passwdcheck.c ****         //Get password
  96:basic-passwdcheck.c ****         my_puts("Please enter password to continue: ");
 370              		.loc 1 96 9 view .LVU84
 371 005a 2048     		ldr	r0, .L29+32
 372 005c FFF7FEFF 		bl	my_puts
 373              	.LVL27:
  97:basic-passwdcheck.c ****         my_read(passwd, 32);
 374              		.loc 1 97 9 view .LVU85
 375 0060 2021     		movs	r1, #32
 376 0062 04A8     		add	r0, sp, #16
 377 0064 FFF7FEFF 		bl	my_read
 378              	.LVL28:
  98:basic-passwdcheck.c **** 
  99:basic-passwdcheck.c ****         uint8_t passbad = 0;
 379              		.loc 1 99 9 view .LVU86
 100:basic-passwdcheck.c **** 
 101:basic-passwdcheck.c ****         trigger_high();
 380              		.loc 1 101 9 view .LVU87
 381 0068 FFF7FEFF 		bl	trigger_high
 382              	.LVL29:
 102:basic-passwdcheck.c **** 
 103:basic-passwdcheck.c ****         for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 383              		.loc 1 103 9 view .LVU88
 384              	.LBB9:
 385              		.loc 1 103 13 view .LVU89
 386              		.loc 1 103 28 view .LVU90
 387 006c 02A9     		add	r1, sp, #8
 388 006e 04AA     		add	r2, sp, #16
 389              	.LBE9:
 101:basic-passwdcheck.c **** 
 390              		.loc 1 101 9 is_stmt 0 view .LVU91
 391 0070 0623     		movs	r3, #6
 392              	.LVL30:
 393              	.L20:
 394              	.LBB10:
 104:basic-passwdcheck.c ****             if (correct_passwd[i] != passwd[i]){
 395              		.loc 1 104 13 is_stmt 1 view .LVU92
 396              		.loc 1 104 31 is_stmt 0 view .LVU93
 397 0072 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
 398              	.LVL31:
 399              		.loc 1 104 44 view .LVU94
 400 0076 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 401              		.loc 1 104 16 view .LVU95
 402 007a 8442     		cmp	r4, r0
 403 007c 1BD1     		bne	.L19
 103:basic-passwdcheck.c ****             if (correct_passwd[i] != passwd[i]){
 404              		.loc 1 103 56 is_stmt 1 discriminator 2 view .LVU96
 405              	.LVL32:
 103:basic-passwdcheck.c ****             if (correct_passwd[i] != passwd[i]){
 406              		.loc 1 103 28 discriminator 2 view .LVU97
 103:basic-passwdcheck.c ****             if (correct_passwd[i] != passwd[i]){
 407              		.loc 1 103 9 is_stmt 0 discriminator 2 view .LVU98
 408 007e 013B     		subs	r3, r3, #1
 409 0080 13F0FF03 		ands	r3, r3, #255
 410 0084 F5D1     		bne	.L20
 103:basic-passwdcheck.c ****             if (correct_passwd[i] != passwd[i]){
 411              		.loc 1 103 9 discriminator 2 view .LVU99
 412              	.LBE10:
 105:basic-passwdcheck.c ****                 passbad = 1;
 106:basic-passwdcheck.c ****                 break;
 107:basic-passwdcheck.c ****             }
 108:basic-passwdcheck.c ****         }
 109:basic-passwdcheck.c **** 
 110:basic-passwdcheck.c ****         if (passbad){
 413              		.loc 1 110 9 is_stmt 1 view .LVU100
 111:basic-passwdcheck.c ****             //Stop them fancy timing attacks
 112:basic-passwdcheck.c ****              int wait = 1;
 113:basic-passwdcheck.c ****             for(volatile int i = 0; i < wait; i++){
 114:basic-passwdcheck.c ****                 ;
 115:basic-passwdcheck.c ****             }
 116:basic-passwdcheck.c ****             delay_2_ms();
 117:basic-passwdcheck.c ****             delay_2_ms();
 118:basic-passwdcheck.c ****             my_puts("PASSWORD FAIL\n");
 119:basic-passwdcheck.c ****             led_error(1);
 120:basic-passwdcheck.c ****         } else {
 121:basic-passwdcheck.c ****             my_puts("Access granted, Welcome!\n");
 414              		.loc 1 121 13 view .LVU101
 415 0086 1648     		ldr	r0, .L29+36
 416 0088 FFF7FEFF 		bl	my_puts
 417              	.LVL33:
 122:basic-passwdcheck.c ****             led_ok(1);
 418              		.loc 1 122 13 view .LVU102
 419 008c 0120     		movs	r0, #1
 420 008e FFF7FEFF 		bl	led_ok
 421              	.LVL34:
 422 0092 0FE0     		b	.L23
 423              	.LVL35:
 424              	.L22:
 425              	.LBB11:
 426              	.LBB12:
 114:basic-passwdcheck.c ****             }
 427              		.loc 1 114 17 discriminator 3 view .LVU103
 113:basic-passwdcheck.c ****                 ;
 428              		.loc 1 113 47 discriminator 3 view .LVU104
 113:basic-passwdcheck.c ****                 ;
 429              		.loc 1 113 48 is_stmt 0 discriminator 3 view .LVU105
 430 0094 019B     		ldr	r3, [sp, #4]
 431 0096 0133     		adds	r3, r3, #1
 432              	.L28:
 433 0098 0193     		str	r3, [sp, #4]
 113:basic-passwdcheck.c ****                 ;
 434              		.loc 1 113 37 is_stmt 1 discriminator 3 view .LVU106
 113:basic-passwdcheck.c ****                 ;
 435              		.loc 1 113 39 is_stmt 0 discriminator 3 view .LVU107
 436 009a 019B     		ldr	r3, [sp, #4]
 113:basic-passwdcheck.c ****                 ;
 437              		.loc 1 113 13 discriminator 3 view .LVU108
 438 009c 002B     		cmp	r3, #0
 439 009e F9DD     		ble	.L22
 440              	.LBE12:
 116:basic-passwdcheck.c ****             delay_2_ms();
 441              		.loc 1 116 13 is_stmt 1 view .LVU109
 118:basic-passwdcheck.c ****             led_error(1);
 442              		.loc 1 118 13 is_stmt 0 view .LVU110
 443 00a0 1048     		ldr	r0, .L29+40
 116:basic-passwdcheck.c ****             delay_2_ms();
 444              		.loc 1 116 13 view .LVU111
 445 00a2 FFF7FEFF 		bl	delay_2_ms
 446              	.LVL36:
 117:basic-passwdcheck.c ****             my_puts("PASSWORD FAIL\n");
 447              		.loc 1 117 13 is_stmt 1 view .LVU112
 448 00a6 FFF7FEFF 		bl	delay_2_ms
 449              	.LVL37:
 118:basic-passwdcheck.c ****             led_error(1);
 450              		.loc 1 118 13 view .LVU113
 451 00aa FFF7FEFF 		bl	my_puts
 452              	.LVL38:
 119:basic-passwdcheck.c ****         } else {
 453              		.loc 1 119 13 view .LVU114
 454 00ae 0120     		movs	r0, #1
 455 00b0 FFF7FEFF 		bl	led_error
 456              	.LVL39:
 457              	.L23:
 458              	.L27:
 119:basic-passwdcheck.c ****         } else {
 459              		.loc 1 119 13 is_stmt 0 view .LVU115
 460              	.LBE11:
 123:basic-passwdcheck.c ****         }
 124:basic-passwdcheck.c **** 
 125:basic-passwdcheck.c ****         //All done;
 126:basic-passwdcheck.c ****         while(1);
 461              		.loc 1 126 9 is_stmt 1 discriminator 1 view .LVU116
 462              		.loc 1 126 17 discriminator 1 view .LVU117
 463              		.loc 1 126 14 discriminator 1 view .LVU118
 464 00b4 FEE7     		b	.L27
 465              	.LVL40:
 466              	.L19:
 110:basic-passwdcheck.c ****             //Stop them fancy timing attacks
 467              		.loc 1 110 9 view .LVU119
 468              	.LBB14:
 112:basic-passwdcheck.c ****             for(volatile int i = 0; i < wait; i++){
 469              		.loc 1 112 14 view .LVU120
 113:basic-passwdcheck.c ****                 ;
 470              		.loc 1 113 13 view .LVU121
 471              	.LBB13:
 113:basic-passwdcheck.c ****                 ;
 472              		.loc 1 113 17 view .LVU122
 113:basic-passwdcheck.c ****                 ;
 473              		.loc 1 113 30 is_stmt 0 view .LVU123
 474 00b6 0023     		movs	r3, #0
 475 00b8 EEE7     		b	.L28
 476              	.L30:
 477 00ba 00BF     		.align	2
 478              	.L29:
 479 00bc 16010000 		.word	.LC0
 480 00c0 00000000 		.word	.LC1
 481 00c4 23000000 		.word	.LC2
 482 00c8 40000000 		.word	.LC3
 483 00cc 5D000000 		.word	.LC4
 484 00d0 7A000000 		.word	.LC5
 485 00d4 97000000 		.word	.LC6
 486 00d8 9A000000 		.word	.LC7
 487 00dc C9000000 		.word	.LC8
 488 00e0 FC000000 		.word	.LC10
 489 00e4 ED000000 		.word	.LC9
 490              	.LBE13:
 491              	.LBE14:
 492              	.LBE15:
 493              		.cfi_endproc
 494              	.LFE8:
 496              		.global	pt
 497              		.global	asciibuf
 498              		.global	tmp
 499              		.global	memory
 500              		.bss
 503              	pt:
 504 0000 00000000 		.space	16
 504      00000000 
 504      00000000 
 504      00000000 
 507              	asciibuf:
 508 0010 00000000 		.space	64
 508      00000000 
 508      00000000 
 508      00000000 
 508      00000000 
 511              	tmp:
 512 0050 00000000 		.space	64
 512      00000000 
 512      00000000 
 512      00000000 
 512      00000000 
 515              	memory:
 516 0090 00000000 		.space	64
 516      00000000 
 516      00000000 
 516      00000000 
 516      00000000 
 517              		.text
 518              	.Letext0:
 519              		.file 3 "/Users/eddy_/arm/arm-none-eabi/include/machine/_default_types.h"
 520              		.file 4 "/Users/eddy_/arm/arm-none-eabi/include/sys/_stdint.h"
 521              		.file 5 ".././hal/stm32f4/stm32f4_hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 basic-passwdcheck.c
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:16     .text.delay_2_ms:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:23     .text.delay_2_ms:0000000000000000 delay_2_ms
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:76     .text.led_ok:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:83     .text.led_ok:0000000000000000 led_ok
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:98     .text.led_error:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:105    .text.led_error:0000000000000000 led_error
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:116    .text.my_puts:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:123    .text.my_puts:0000000000000000 my_puts
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:158    .text.my_read:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:165    .text.my_read:0000000000000000 my_read
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:273    .text.startup.main:0000000000000000 $t
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:280    .text.startup.main:0000000000000000 main
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:479    .text.startup.main:00000000000000bc $d
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:503    .bss:0000000000000000 pt
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:507    .bss:0000000000000010 asciibuf
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:511    .bss:0000000000000050 tmp
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:515    .bss:0000000000000090 memory
/var/folders/k6/20g8yg0d333_shmzvnmp74nc0000gn/T//ccE98mqs.s:504    .bss:0000000000000000 $d

UNDEFINED SYMBOLS
putch
getch
platform_init
init_uart
trigger_setup
trigger_low
trigger_high
